{"ast":null,"code":"/*!\nFullCalendar Scheduler v5.10.0\nDocs & License: https://fullcalendar.io/scheduler\n(c) 2021 Adam Shaw\n*/\nimport './main.css';\nimport { createElement, Fragment, ContentHook, BaseComponent, memoizeObjArg, buildClassNameNormalizer, MountHook, RenderHook, isArraysEqual, createRef, RefMap, findElements, elementClosest, PositionCache, memoize, greatestDurationDenominator, NowTimer, NowIndicatorRoot, DateComponent, config, getStickyHeaderDates, getStickyFooterScrollbar, renderScrollShim, ViewRoot, createPlugin } from '@fullcalendar/common';\nimport premiumCommonPlugin from '@fullcalendar/premium-common';\nimport timelinePlugin, { TimelineLane, TimelineLaneSlicer, TimelineSlats, TimelineLaneBg, coordToCss, buildTimelineDateProfile, buildSlatCols, TimelineHeader } from '@fullcalendar/timeline';\nimport resourceCommonPlugin, { ResourceApi, buildResourceFields, getPublicId, isGroupsEqual, ResourceSplitter, buildRowNodes, DEFAULT_RESOURCE_ORDER } from '@fullcalendar/resource-common';\nimport { __spreadArray, __extends, __assign } from 'tslib';\nimport { ScrollGrid } from '@fullcalendar/scrollgrid';\n/*\nRenders the DOM responsible for the subrow expander area,\nas well as the space before it (used to align expanders of similar depths)\n*/\n\nfunction ExpanderIcon(_a) {\n  var depth = _a.depth,\n      hasChildren = _a.hasChildren,\n      isExpanded = _a.isExpanded,\n      onExpanderClick = _a.onExpanderClick;\n  var nodes = [];\n\n  for (var i = 0; i < depth; i += 1) {\n    nodes.push(createElement(\"span\", {\n      className: \"fc-icon\"\n    }));\n  }\n\n  var iconClassNames = ['fc-icon'];\n\n  if (hasChildren) {\n    if (isExpanded) {\n      iconClassNames.push('fc-icon-minus-square');\n    } else {\n      iconClassNames.push('fc-icon-plus-square');\n    }\n  }\n\n  nodes.push(createElement(\"span\", {\n    className: 'fc-datagrid-expander' + (hasChildren ? '' : ' fc-datagrid-expander-placeholder'),\n    onClick: onExpanderClick\n  }, createElement(\"span\", {\n    className: iconClassNames.join(' ')\n  })));\n  return createElement.apply(void 0, __spreadArray([Fragment, {}], nodes));\n}\n\nfunction refineHookProps$1(raw) {\n  return {\n    resource: new ResourceApi(raw.context, raw.resource),\n    fieldValue: raw.fieldValue,\n    view: raw.context.viewApi\n  };\n}\n\nvar SpreadsheetIndividualCellInner =\n/** @class */\nfunction (_super) {\n  __extends(SpreadsheetIndividualCellInner, _super);\n\n  function SpreadsheetIndividualCellInner() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SpreadsheetIndividualCellInner.prototype.render = function () {\n    var props = this.props;\n    return createElement(ContentHook, {\n      hookProps: props.hookProps,\n      content: props.colSpec.cellContent,\n      defaultContent: renderResourceInner\n    }, function (innerElRef, innerContent) {\n      return createElement(\"span\", {\n        className: \"fc-datagrid-cell-main\",\n        ref: innerElRef\n      }, innerContent);\n    });\n  };\n\n  return SpreadsheetIndividualCellInner;\n}(BaseComponent);\n\nfunction renderResourceInner(hookProps) {\n  return hookProps.fieldValue || createElement(Fragment, null, \"\\u00A0\");\n} // worth making a PureComponent? (because of innerHeight)\n\n\nvar SpreadsheetIndividualCell =\n/** @class */\nfunction (_super) {\n  __extends(SpreadsheetIndividualCell, _super);\n\n  function SpreadsheetIndividualCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.refineHookProps = memoizeObjArg(refineHookProps$1);\n    _this.normalizeClassNames = buildClassNameNormalizer();\n\n    _this.onExpanderClick = function (ev) {\n      var props = _this.props;\n\n      if (props.hasChildren) {\n        _this.context.dispatch({\n          type: 'SET_RESOURCE_ENTITY_EXPANDED',\n          id: props.resource.id,\n          isExpanded: !props.isExpanded\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  SpreadsheetIndividualCell.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var colSpec = props.colSpec;\n    var hookProps = this.refineHookProps({\n      resource: props.resource,\n      fieldValue: props.fieldValue,\n      context: context\n    });\n    var customClassNames = this.normalizeClassNames(colSpec.cellClassNames, hookProps);\n    return createElement(MountHook, {\n      hookProps: hookProps,\n      didMount: colSpec.cellDidMount,\n      willUnmount: colSpec.cellWillUnmount\n    }, function (rootElRef) {\n      return createElement(\"td\", {\n        ref: rootElRef,\n        role: \"gridcell\",\n        \"data-resource-id\": props.resource.id,\n        className: ['fc-datagrid-cell', 'fc-resource'].concat(customClassNames).join(' ')\n      }, createElement(\"div\", {\n        className: \"fc-datagrid-cell-frame\",\n        style: {\n          height: props.innerHeight\n        }\n      }, createElement(\"div\", {\n        className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\"\n      }, colSpec.isMain && createElement(ExpanderIcon, {\n        depth: props.depth,\n        hasChildren: props.hasChildren,\n        isExpanded: props.isExpanded,\n        onExpanderClick: _this.onExpanderClick\n      }), createElement(SpreadsheetIndividualCellInner, {\n        hookProps: hookProps,\n        colSpec: colSpec\n      }))));\n    });\n  };\n\n  return SpreadsheetIndividualCell;\n}(BaseComponent); // for VERTICAL cell grouping, in spreadsheet area\n\n\nvar SpreadsheetGroupCell =\n/** @class */\nfunction (_super) {\n  __extends(SpreadsheetGroupCell, _super);\n\n  function SpreadsheetGroupCell() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SpreadsheetGroupCell.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var colSpec = props.colSpec;\n    var hookProps = {\n      groupValue: props.fieldValue,\n      view: context.viewApi\n    }; // a grouped cell. no data that is specific to this specific resource\n    // `colSpec` is for the group. a GroupSpec :(\n\n    return createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: colSpec.cellClassNames,\n      content: colSpec.cellContent,\n      defaultContent: renderGroupInner,\n      didMount: colSpec.cellDidMount,\n      willUnmount: colSpec.cellWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return (// TODO: make data-attr with group value?\n        createElement(\"td\", {\n          ref: rootElRef,\n          role: \"gridcell\",\n          rowSpan: props.rowSpan,\n          className: ['fc-datagrid-cell', 'fc-resource-group'].concat(classNames).join(' ')\n        }, createElement(\"div\", {\n          className: \"fc-datagrid-cell-frame fc-datagrid-cell-frame-liquid\"\n        }, createElement(\"div\", {\n          className: \"fc-datagrid-cell-cushion fc-sticky\",\n          ref: innerElRef\n        }, innerContent)))\n      );\n    });\n  };\n\n  return SpreadsheetGroupCell;\n}(BaseComponent);\n\nfunction renderGroupInner(hookProps) {\n  return hookProps.groupValue || createElement(Fragment, null, \"\\u00A0\");\n}\n\nvar SpreadsheetRow =\n/** @class */\nfunction (_super) {\n  __extends(SpreadsheetRow, _super);\n\n  function SpreadsheetRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SpreadsheetRow.prototype.render = function () {\n    var props = this.props;\n    var resource = props.resource,\n        rowSpans = props.rowSpans,\n        depth = props.depth;\n    var resourceFields = buildResourceFields(resource); // slightly inefficient. already done up the call stack\n\n    return createElement(\"tr\", {\n      role: \"row\"\n    }, props.colSpecs.map(function (colSpec, i) {\n      var rowSpan = rowSpans[i];\n\n      if (rowSpan === 0) {\n        // not responsible for group-based rows. VRowGroup is\n        return null;\n      }\n\n      if (rowSpan == null) {\n        rowSpan = 1;\n      }\n\n      var fieldValue = colSpec.field ? resourceFields[colSpec.field] : resource.title || getPublicId(resource.id);\n\n      if (rowSpan > 1) {\n        return createElement(SpreadsheetGroupCell, {\n          key: i,\n          colSpec: colSpec,\n          fieldValue: fieldValue,\n          rowSpan: rowSpan\n        });\n      }\n\n      return createElement(SpreadsheetIndividualCell, {\n        key: i,\n        colSpec: colSpec,\n        resource: resource,\n        fieldValue: fieldValue,\n        depth: depth,\n        hasChildren: props.hasChildren,\n        isExpanded: props.isExpanded,\n        innerHeight: props.innerHeight\n      });\n    }));\n  };\n\n  return SpreadsheetRow;\n}(BaseComponent);\n\nSpreadsheetRow.addPropsEquality({\n  rowSpans: isArraysEqual\n}); // for HORIZONTAL cell grouping, in spreadsheet area\n\nvar SpreadsheetGroupRow =\n/** @class */\nfunction (_super) {\n  __extends(SpreadsheetGroupRow, _super);\n\n  function SpreadsheetGroupRow() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.innerInnerRef = createRef();\n\n    _this.onExpanderClick = function () {\n      var props = _this.props;\n\n      _this.context.dispatch({\n        type: 'SET_RESOURCE_ENTITY_EXPANDED',\n        id: props.id,\n        isExpanded: !props.isExpanded\n      });\n    };\n\n    return _this;\n  }\n\n  SpreadsheetGroupRow.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var hookProps = {\n      groupValue: props.group.value,\n      view: context.viewApi\n    };\n    var spec = props.group.spec;\n    return createElement(\"tr\", {\n      role: \"row\"\n    }, createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: spec.labelClassNames,\n      content: spec.labelContent,\n      defaultContent: renderCellInner,\n      didMount: spec.labelDidMount,\n      willUnmount: spec.labelWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"th\", {\n        ref: rootElRef,\n        // ARIA TODO: not really a columnheader\n        // extremely tedious to make this aria-compliant,\n        // to assign multiple headers to each cell\n        // https://www.w3.org/WAI/tutorials/tables/multi-level/\n        role: \"columnheader\",\n        scope: \"colgroup\",\n        colSpan: props.spreadsheetColCnt,\n        className: ['fc-datagrid-cell', 'fc-resource-group', context.theme.getClass('tableCellShaded')].concat(classNames).join(' ')\n      }, createElement(\"div\", {\n        className: \"fc-datagrid-cell-frame\",\n        style: {\n          height: props.innerHeight\n        }\n      }, createElement(\"div\", {\n        className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\",\n        ref: _this.innerInnerRef\n      }, createElement(ExpanderIcon, {\n        depth: 0,\n        hasChildren: true,\n        isExpanded: props.isExpanded,\n        onExpanderClick: _this.onExpanderClick\n      }), createElement(\"span\", {\n        className: \"fc-datagrid-cell-main\",\n        ref: innerElRef\n      }, innerContent))));\n    }));\n  };\n\n  return SpreadsheetGroupRow;\n}(BaseComponent);\n\nSpreadsheetGroupRow.addPropsEquality({\n  group: isGroupsEqual\n});\n\nfunction renderCellInner(hookProps) {\n  return hookProps.groupValue || createElement(Fragment, null, \"\\u00A0\");\n}\n\nvar SPREADSHEET_COL_MIN_WIDTH = 20;\n\nvar SpreadsheetHeader =\n/** @class */\nfunction (_super) {\n  __extends(SpreadsheetHeader, _super);\n\n  function SpreadsheetHeader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.resizerElRefs = new RefMap(_this._handleColResizerEl.bind(_this));\n    _this.colDraggings = {};\n    return _this;\n  }\n\n  SpreadsheetHeader.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        colSpecs = _a.colSpecs,\n        superHeaderRendering = _a.superHeaderRendering,\n        rowInnerHeights = _a.rowInnerHeights;\n    var hookProps = {\n      view: this.context.viewApi\n    };\n    var rowNodes = [];\n    rowInnerHeights = rowInnerHeights.slice(); // copy, because we're gonna pop\n\n    if (superHeaderRendering) {\n      var rowInnerHeight_1 = rowInnerHeights.shift();\n      rowNodes.push(createElement(\"tr\", {\n        key: \"row-super\",\n        role: \"row\"\n      }, createElement(RenderHook, {\n        hookProps: hookProps,\n        classNames: superHeaderRendering.headerClassNames,\n        content: superHeaderRendering.headerContent,\n        didMount: superHeaderRendering.headerDidMount,\n        willUnmount: superHeaderRendering.headerWillUnmount\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"th\", {\n          ref: rootElRef,\n          role: \"columnheader\",\n          scope: \"colgroup\",\n          colSpan: colSpecs.length,\n          className: ['fc-datagrid-cell', 'fc-datagrid-cell-super'].concat(classNames).join(' ')\n        }, createElement(\"div\", {\n          className: \"fc-datagrid-cell-frame\",\n          style: {\n            height: rowInnerHeight_1\n          }\n        }, createElement(\"div\", {\n          className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\",\n          ref: innerElRef\n        }, innerContent)));\n      })));\n    }\n\n    var rowInnerHeight = rowInnerHeights.shift();\n    rowNodes.push(createElement(\"tr\", {\n      key: \"row\",\n      role: \"row\"\n    }, colSpecs.map(function (colSpec, i) {\n      var isLastCol = i === colSpecs.length - 1; // need empty inner div for abs positioning for resizer\n\n      return createElement(RenderHook, {\n        key: i,\n        hookProps: hookProps,\n        classNames: colSpec.headerClassNames,\n        content: colSpec.headerContent,\n        didMount: colSpec.headerDidMount,\n        willUnmount: colSpec.headerWillUnmount\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"th\", {\n          ref: rootElRef,\n          role: \"columnheader\",\n          className: ['fc-datagrid-cell'].concat(classNames).join(' ')\n        }, createElement(\"div\", {\n          className: \"fc-datagrid-cell-frame\",\n          style: {\n            height: rowInnerHeight\n          }\n        }, createElement(\"div\", {\n          className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\"\n        }, colSpec.isMain && createElement(\"span\", {\n          className: \"fc-datagrid-expander fc-datagrid-expander-placeholder\"\n        }, createElement(\"span\", {\n          className: \"fc-icon\"\n        })), createElement(\"span\", {\n          className: \"fc-datagrid-cell-main\",\n          ref: innerElRef\n        }, innerContent)), !isLastCol && createElement(\"div\", {\n          className: \"fc-datagrid-cell-resizer\",\n          ref: _this.resizerElRefs.createRef(i)\n        })));\n      });\n    })));\n    return createElement(Fragment, null, rowNodes);\n  };\n\n  SpreadsheetHeader.prototype._handleColResizerEl = function (resizerEl, index) {\n    var colDraggings = this.colDraggings;\n\n    if (!resizerEl) {\n      var dragging = colDraggings[index];\n\n      if (dragging) {\n        dragging.destroy();\n        delete colDraggings[index];\n      }\n    } else {\n      var dragging = this.initColResizing(resizerEl, parseInt(index, 10));\n\n      if (dragging) {\n        colDraggings[index] = dragging;\n      }\n    }\n  };\n\n  SpreadsheetHeader.prototype.initColResizing = function (resizerEl, index) {\n    var _a = this.context,\n        pluginHooks = _a.pluginHooks,\n        isRtl = _a.isRtl;\n    var onColWidthChange = this.props.onColWidthChange;\n    var ElementDraggingImpl = pluginHooks.elementDraggingImpl;\n\n    if (ElementDraggingImpl) {\n      var dragging = new ElementDraggingImpl(resizerEl);\n      var startWidth_1; // of just the single column\n\n      var currentWidths_1; // of all columns\n\n      dragging.emitter.on('dragstart', function () {\n        var allCells = findElements(elementClosest(resizerEl, 'tr'), 'th');\n        currentWidths_1 = allCells.map(function (cellEl) {\n          return cellEl.getBoundingClientRect().width;\n        });\n        startWidth_1 = currentWidths_1[index];\n      });\n      dragging.emitter.on('dragmove', function (pev) {\n        currentWidths_1[index] = Math.max(startWidth_1 + pev.deltaX * (isRtl ? -1 : 1), SPREADSHEET_COL_MIN_WIDTH);\n\n        if (onColWidthChange) {\n          onColWidthChange(currentWidths_1.slice()); // send a copy since currentWidths continues to be mutated\n        }\n      });\n      dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n\n      return dragging;\n    }\n\n    return null;\n  };\n\n  return SpreadsheetHeader;\n}(BaseComponent);\n\nvar ResourceTimelineLaneMisc =\n/** @class */\nfunction (_super) {\n  __extends(ResourceTimelineLaneMisc, _super);\n\n  function ResourceTimelineLaneMisc() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ResourceTimelineLaneMisc.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var hookProps = {\n      resource: new ResourceApi(context, props.resource)\n    }; // just easier to make directly\n\n    return createElement(ContentHook, {\n      hookProps: hookProps,\n      content: context.options.resourceLaneContent\n    }, function (innerElRef, innerContent) {\n      return innerContent && // TODO: test how this would interfere with height\n      createElement(\"div\", {\n        className: \"fc-timeline-lane-misc\",\n        ref: innerElRef\n      }, innerContent);\n    });\n  };\n\n  return ResourceTimelineLaneMisc;\n}(BaseComponent);\n\nvar ResourceTimelineLane =\n/** @class */\nfunction (_super) {\n  __extends(ResourceTimelineLane, _super);\n\n  function ResourceTimelineLane() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.refineHookProps = memoizeObjArg(refineHookProps);\n    _this.normalizeClassNames = buildClassNameNormalizer();\n\n    _this.handleHeightChange = function (innerEl, isStable) {\n      if (_this.props.onHeightChange) {\n        _this.props.onHeightChange( // would want to use own <tr> ref, but not guaranteed to be ready when this fires\n        elementClosest(innerEl, 'tr'), isStable);\n      }\n    };\n\n    return _this;\n  }\n\n  ResourceTimelineLane.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var options = context.options;\n    var hookProps = this.refineHookProps({\n      resource: props.resource,\n      context: context\n    });\n    var customClassNames = this.normalizeClassNames(options.resourceLaneClassNames, hookProps);\n    return createElement(\"tr\", {\n      ref: props.elRef\n    }, createElement(MountHook, {\n      hookProps: hookProps,\n      didMount: options.resourceLaneDidMount,\n      willUnmount: options.resourceLaneWillUnmount\n    }, function (rootElRef) {\n      return createElement(\"td\", {\n        ref: rootElRef,\n        className: ['fc-timeline-lane', 'fc-resource'].concat(customClassNames).join(' '),\n        \"data-resource-id\": props.resource.id\n      }, createElement(\"div\", {\n        className: \"fc-timeline-lane-frame\",\n        style: {\n          height: props.innerHeight\n        }\n      }, createElement(ResourceTimelineLaneMisc, {\n        resource: props.resource\n      }), createElement(TimelineLane, {\n        dateProfile: props.dateProfile,\n        tDateProfile: props.tDateProfile,\n        nowDate: props.nowDate,\n        todayRange: props.todayRange,\n        nextDayThreshold: props.nextDayThreshold,\n        businessHours: props.businessHours,\n        eventStore: props.eventStore,\n        eventUiBases: props.eventUiBases,\n        dateSelection: props.dateSelection,\n        eventSelection: props.eventSelection,\n        eventDrag: props.eventDrag,\n        eventResize: props.eventResize,\n        timelineCoords: props.timelineCoords,\n        onHeightChange: _this.handleHeightChange,\n        resourceId: props.resource.id\n      })));\n    })); // important NOT to do liquid-height. dont want to shrink height smaller than content\n  };\n\n  return ResourceTimelineLane;\n}(BaseComponent);\n\nfunction refineHookProps(raw) {\n  return {\n    resource: new ResourceApi(raw.context, raw.resource)\n  };\n}\n/*\nparallels the SpreadsheetGroupRow\n*/\n\n\nvar DividerRow =\n/** @class */\nfunction (_super) {\n  __extends(DividerRow, _super);\n\n  function DividerRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DividerRow.prototype.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    var renderingHooks = this.props.renderingHooks;\n    var hookProps = {\n      groupValue: props.groupValue,\n      view: this.context.viewApi\n    };\n    return createElement(\"tr\", {\n      ref: props.elRef\n    }, createElement(RenderHook, {\n      hookProps: hookProps,\n      classNames: renderingHooks.laneClassNames,\n      content: renderingHooks.laneContent,\n      didMount: renderingHooks.laneDidMount,\n      willUnmount: renderingHooks.laneWillUnmount\n    }, function (rootElRef, classNames, innerElRef, innerContent) {\n      return createElement(\"td\", {\n        ref: rootElRef,\n        className: ['fc-timeline-lane', 'fc-resource-group', _this.context.theme.getClass('tableCellShaded')].concat(classNames).join(' ')\n      }, createElement(\"div\", {\n        style: {\n          height: props.innerHeight\n        },\n        ref: innerElRef\n      }, innerContent));\n    }));\n  };\n\n  return DividerRow;\n}(BaseComponent);\n\nvar ResourceTimelineLanesBody =\n/** @class */\nfunction (_super) {\n  __extends(ResourceTimelineLanesBody, _super);\n\n  function ResourceTimelineLanesBody() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ResourceTimelineLanesBody.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    var rowElRefs = props.rowElRefs,\n        innerHeights = props.innerHeights;\n    return createElement(\"tbody\", null, props.rowNodes.map(function (node, index) {\n      if (node.group) {\n        return createElement(DividerRow, {\n          key: node.id,\n          elRef: rowElRefs.createRef(node.id),\n          groupValue: node.group.value,\n          renderingHooks: node.group.spec,\n          innerHeight: innerHeights[index] || ''\n        });\n      }\n\n      if (node.resource) {\n        var resource = node.resource;\n        return createElement(ResourceTimelineLane, __assign({\n          key: node.id,\n          elRef: rowElRefs.createRef(node.id)\n        }, props.splitProps[resource.id], {\n          resource: resource,\n          dateProfile: props.dateProfile,\n          tDateProfile: props.tDateProfile,\n          nowDate: props.nowDate,\n          todayRange: props.todayRange,\n          nextDayThreshold: context.options.nextDayThreshold,\n          businessHours: resource.businessHours || props.fallbackBusinessHours,\n          innerHeight: innerHeights[index] || '',\n          timelineCoords: props.slatCoords,\n          onHeightChange: props.onRowHeightChange\n        }));\n      }\n\n      return null;\n    }));\n  };\n\n  return ResourceTimelineLanesBody;\n}(BaseComponent);\n\nvar ResourceTimelineLanes =\n/** @class */\nfunction (_super) {\n  __extends(ResourceTimelineLanes, _super);\n\n  function ResourceTimelineLanes() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rootElRef = createRef();\n    _this.rowElRefs = new RefMap();\n    return _this;\n  }\n\n  ResourceTimelineLanes.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        context = _a.context;\n\n    return createElement(\"table\", {\n      ref: this.rootElRef,\n      \"aria-hidden\": true,\n      className: 'fc-scrollgrid-sync-table ' + context.theme.getClass('table'),\n      style: {\n        minWidth: props.tableMinWidth,\n        width: props.clientWidth,\n        height: props.minHeight\n      }\n    }, createElement(ResourceTimelineLanesBody, {\n      rowElRefs: this.rowElRefs,\n      rowNodes: props.rowNodes,\n      dateProfile: props.dateProfile,\n      tDateProfile: props.tDateProfile,\n      nowDate: props.nowDate,\n      todayRange: props.todayRange,\n      splitProps: props.splitProps,\n      fallbackBusinessHours: props.fallbackBusinessHours,\n      slatCoords: props.slatCoords,\n      innerHeights: props.innerHeights,\n      onRowHeightChange: props.onRowHeightChange\n    }));\n  };\n\n  ResourceTimelineLanes.prototype.componentDidMount = function () {\n    this.updateCoords();\n  };\n\n  ResourceTimelineLanes.prototype.componentDidUpdate = function () {\n    this.updateCoords();\n  };\n\n  ResourceTimelineLanes.prototype.componentWillUnmount = function () {\n    if (this.props.onRowCoords) {\n      this.props.onRowCoords(null);\n    }\n  };\n\n  ResourceTimelineLanes.prototype.updateCoords = function () {\n    var props = this.props;\n\n    if (props.onRowCoords && props.clientWidth !== null) {\n      // a populated clientWidth means sizing has stabilized\n      this.props.onRowCoords(new PositionCache(this.rootElRef.current, collectRowEls(this.rowElRefs.currentMap, props.rowNodes), false, true));\n    }\n  };\n\n  return ResourceTimelineLanes;\n}(BaseComponent);\n\nfunction collectRowEls(elMap, rowNodes) {\n  return rowNodes.map(function (rowNode) {\n    return elMap[rowNode.id];\n  });\n}\n\nvar ResourceTimelineGrid =\n/** @class */\nfunction (_super) {\n  __extends(ResourceTimelineGrid, _super);\n\n  function ResourceTimelineGrid() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.computeHasResourceBusinessHours = memoize(computeHasResourceBusinessHours);\n    _this.resourceSplitter = new ResourceSplitter(); // doesn't let it do businessHours tho\n\n    _this.bgSlicer = new TimelineLaneSlicer();\n    _this.slatsRef = createRef(); // needed for Hit creation :(\n\n    _this.state = {\n      slatCoords: null\n    };\n\n    _this.handleEl = function (el) {\n      if (el) {\n        _this.context.registerInteractiveComponent(_this, {\n          el: el\n        });\n      } else {\n        _this.context.unregisterInteractiveComponent(_this);\n      }\n    };\n\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n\n      if (_this.props.onSlatCoords) {\n        _this.props.onSlatCoords(slatCoords);\n      }\n    };\n\n    _this.handleRowCoords = function (rowCoords) {\n      _this.rowCoords = rowCoords;\n\n      if (_this.props.onRowCoords) {\n        _this.props.onRowCoords(rowCoords);\n      }\n    };\n\n    return _this;\n  }\n\n  ResourceTimelineGrid.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        state = _a.state,\n        context = _a.context;\n\n    var dateProfile = props.dateProfile,\n        tDateProfile = props.tDateProfile;\n    var timerUnit = greatestDurationDenominator(tDateProfile.slotDuration).unit;\n    var hasResourceBusinessHours = this.computeHasResourceBusinessHours(props.rowNodes);\n    var splitProps = this.resourceSplitter.splitProps(props);\n    var bgLaneProps = splitProps[''];\n    var bgSlicedProps = this.bgSlicer.sliceProps(bgLaneProps, dateProfile, tDateProfile.isTimeScale ? null : props.nextDayThreshold, context, // wish we didn't need to pass in the rest of these args...\n    dateProfile, context.dateProfileGenerator, tDateProfile, context.dateEnv); // WORKAROUND: make ignore slatCoords when out of sync with dateProfile\n\n    var slatCoords = state.slatCoords && state.slatCoords.dateProfile === props.dateProfile ? state.slatCoords : null;\n    return createElement(\"div\", {\n      ref: this.handleEl,\n      className: ['fc-timeline-body', props.expandRows ? 'fc-timeline-body-expandrows' : ''].join(' '),\n      style: {\n        minWidth: props.tableMinWidth\n      }\n    }, createElement(NowTimer, {\n      unit: timerUnit\n    }, function (nowDate, todayRange) {\n      return createElement(Fragment, null, createElement(TimelineSlats, {\n        ref: _this.slatsRef,\n        dateProfile: dateProfile,\n        tDateProfile: tDateProfile,\n        nowDate: nowDate,\n        todayRange: todayRange,\n        clientWidth: props.clientWidth,\n        tableColGroupNode: props.tableColGroupNode,\n        tableMinWidth: props.tableMinWidth,\n        onCoords: _this.handleSlatCoords,\n        onScrollLeftRequest: props.onScrollLeftRequest\n      }), createElement(TimelineLaneBg, {\n        businessHourSegs: hasResourceBusinessHours ? null : bgSlicedProps.businessHourSegs,\n        bgEventSegs: bgSlicedProps.bgEventSegs,\n        timelineCoords: slatCoords,\n        // empty array will result in unnecessary rerenders?\n        eventResizeSegs: bgSlicedProps.eventResize ? bgSlicedProps.eventResize.segs : [],\n        dateSelectionSegs: bgSlicedProps.dateSelectionSegs,\n        nowDate: nowDate,\n        todayRange: todayRange\n      }), createElement(ResourceTimelineLanes, {\n        rowNodes: props.rowNodes,\n        dateProfile: dateProfile,\n        tDateProfile: props.tDateProfile,\n        nowDate: nowDate,\n        todayRange: todayRange,\n        splitProps: splitProps,\n        fallbackBusinessHours: hasResourceBusinessHours ? props.businessHours : null,\n        clientWidth: props.clientWidth,\n        minHeight: props.expandRows ? props.clientHeight : '',\n        tableMinWidth: props.tableMinWidth,\n        innerHeights: props.rowInnerHeights,\n        slatCoords: slatCoords,\n        onRowCoords: _this.handleRowCoords,\n        onRowHeightChange: props.onRowHeightChange\n      }), context.options.nowIndicator && slatCoords && slatCoords.isDateInRange(nowDate) && createElement(\"div\", {\n        className: \"fc-timeline-now-indicator-container\"\n      }, createElement(NowIndicatorRoot, {\n        isAxis: false,\n        date: nowDate\n      }, function (rootElRef, classNames, innerElRef, innerContent) {\n        return createElement(\"div\", {\n          ref: rootElRef,\n          className: ['fc-timeline-now-indicator-line'].concat(classNames).join(' '),\n          style: coordToCss(slatCoords.dateToCoord(nowDate), context.isRtl)\n        }, innerContent);\n      })));\n    }));\n  }; // Hit System\n  // ------------------------------------------------------------------------------------------\n\n\n  ResourceTimelineGrid.prototype.queryHit = function (positionLeft, positionTop) {\n    var rowCoords = this.rowCoords;\n    var rowIndex = rowCoords.topToIndex(positionTop);\n\n    if (rowIndex != null) {\n      var resource = this.props.rowNodes[rowIndex].resource;\n\n      if (resource) {\n        // not a group\n        var slatHit = this.slatsRef.current.positionToHit(positionLeft);\n\n        if (slatHit) {\n          return {\n            dateProfile: this.props.dateProfile,\n            dateSpan: {\n              range: slatHit.dateSpan.range,\n              allDay: slatHit.dateSpan.allDay,\n              resourceId: resource.id\n            },\n            rect: {\n              left: slatHit.left,\n              right: slatHit.right,\n              top: rowCoords.tops[rowIndex],\n              bottom: rowCoords.bottoms[rowIndex]\n            },\n            dayEl: slatHit.dayEl,\n            layer: 0\n          };\n        }\n      }\n    }\n\n    return null;\n  };\n\n  return ResourceTimelineGrid;\n}(DateComponent);\n\nfunction computeHasResourceBusinessHours(rowNodes) {\n  for (var _i = 0, rowNodes_1 = rowNodes; _i < rowNodes_1.length; _i++) {\n    var node = rowNodes_1[_i];\n    var resource = node.resource;\n\n    if (resource && resource.businessHours) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar MIN_RESOURCE_AREA_WIDTH = 30; // definitely bigger than scrollbars\n// RENAME?\n\nvar ResourceTimelineViewLayout =\n/** @class */\nfunction (_super) {\n  __extends(ResourceTimelineViewLayout, _super);\n\n  function ResourceTimelineViewLayout() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.scrollGridRef = createRef();\n    _this.timeBodyScrollerElRef = createRef();\n    _this.spreadsheetHeaderChunkElRef = createRef();\n    _this.rootElRef = createRef();\n    _this.ensureScrollGridResizeId = 0;\n    _this.state = {\n      resourceAreaWidthOverride: null\n    };\n    /*\n    ghetto debounce. don't race with ScrollGrid's resizing delay. solves #6140\n    */\n\n    _this.ensureScrollGridResize = function () {\n      if (_this.ensureScrollGridResizeId) {\n        clearTimeout(_this.ensureScrollGridResizeId);\n      }\n\n      _this.ensureScrollGridResizeId = setTimeout(function () {\n        _this.scrollGridRef.current.handleSizing(false);\n      }, config.SCROLLGRID_RESIZE_INTERVAL + 1);\n    };\n\n    return _this;\n  }\n\n  ResourceTimelineViewLayout.prototype.render = function () {\n    var _a = this,\n        props = _a.props,\n        state = _a.state,\n        context = _a.context;\n\n    var options = context.options;\n    var stickyHeaderDates = !props.forPrint && getStickyHeaderDates(options);\n    var stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(options);\n    var sections = [{\n      type: 'header',\n      key: 'header',\n      syncRowHeights: true,\n      isSticky: stickyHeaderDates,\n      chunks: [{\n        key: 'datagrid',\n        elRef: this.spreadsheetHeaderChunkElRef,\n        // TODO: allow the content to specify this. have general-purpose 'content' with obj with keys\n        tableClassName: 'fc-datagrid-header',\n        rowContent: props.spreadsheetHeaderRows\n      }, {\n        key: 'divider',\n        outerContent: createElement(\"td\", {\n          role: \"presentation\",\n          className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')\n        })\n      }, {\n        key: 'timeline',\n        content: props.timeHeaderContent\n      }]\n    }, {\n      type: 'body',\n      key: 'body',\n      syncRowHeights: true,\n      liquid: true,\n      expandRows: Boolean(options.expandRows),\n      chunks: [{\n        key: 'datagrid',\n        tableClassName: 'fc-datagrid-body',\n        rowContent: props.spreadsheetBodyRows\n      }, {\n        key: 'divider',\n        outerContent: createElement(\"td\", {\n          role: \"presentation\",\n          className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')\n        })\n      }, {\n        key: 'timeline',\n        scrollerElRef: this.timeBodyScrollerElRef,\n        content: props.timeBodyContent\n      }]\n    }];\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'datagrid',\n          content: renderScrollShim\n        }, {\n          key: 'divider',\n          outerContent: createElement(\"td\", {\n            role: \"presentation\",\n            className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')\n          })\n        }, {\n          key: 'timeline',\n          content: renderScrollShim\n        }]\n      });\n    }\n\n    var resourceAreaWidth = state.resourceAreaWidthOverride != null ? state.resourceAreaWidthOverride : options.resourceAreaWidth;\n    return createElement(ScrollGrid, {\n      ref: this.scrollGridRef,\n      elRef: this.rootElRef,\n      liquid: !props.isHeightAuto && !props.forPrint,\n      collapsibleWidth: false,\n      colGroups: [{\n        cols: props.spreadsheetCols,\n        width: resourceAreaWidth\n      }, {\n        cols: []\n      }, {\n        cols: props.timeCols\n      }],\n      sections: sections\n    });\n  };\n\n  ResourceTimelineViewLayout.prototype.forceTimeScroll = function (left) {\n    var scrollGrid = this.scrollGridRef.current;\n    scrollGrid.forceScrollLeft(2, left); // 2 = the time area\n  };\n\n  ResourceTimelineViewLayout.prototype.forceResourceScroll = function (top) {\n    var scrollGrid = this.scrollGridRef.current;\n    scrollGrid.forceScrollTop(1, top); // 1 = the body\n  };\n\n  ResourceTimelineViewLayout.prototype.getResourceScroll = function () {\n    var timeBodyScrollerEl = this.timeBodyScrollerElRef.current;\n    return timeBodyScrollerEl.scrollTop;\n  }; // Resource Area Resizing\n  // ------------------------------------------------------------------------------------------\n  // NOTE: a callback Ref for the resizer was firing multiple times with same elements (Preact)\n  // that's why we use spreadsheetResizerElRef instead\n\n\n  ResourceTimelineViewLayout.prototype.componentDidMount = function () {\n    this.initSpreadsheetResizing();\n  };\n\n  ResourceTimelineViewLayout.prototype.componentWillUnmount = function () {\n    this.destroySpreadsheetResizing();\n  };\n\n  ResourceTimelineViewLayout.prototype.initSpreadsheetResizing = function () {\n    var _this = this;\n\n    var _a = this.context,\n        isRtl = _a.isRtl,\n        pluginHooks = _a.pluginHooks;\n    var ElementDraggingImpl = pluginHooks.elementDraggingImpl;\n    var spreadsheetHeadEl = this.spreadsheetHeaderChunkElRef.current;\n\n    if (ElementDraggingImpl) {\n      var rootEl_1 = this.rootElRef.current;\n      var dragging = this.spreadsheetResizerDragging = new ElementDraggingImpl(rootEl_1, '.fc-resource-timeline-divider');\n      var dragStartWidth_1;\n      var viewWidth_1;\n      dragging.emitter.on('dragstart', function () {\n        dragStartWidth_1 = spreadsheetHeadEl.getBoundingClientRect().width;\n        viewWidth_1 = rootEl_1.getBoundingClientRect().width;\n      });\n      dragging.emitter.on('dragmove', function (pev) {\n        var newWidth = dragStartWidth_1 + pev.deltaX * (isRtl ? -1 : 1);\n        newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH);\n        newWidth = Math.min(newWidth, viewWidth_1 - MIN_RESOURCE_AREA_WIDTH); // scrollgrid will ignore resize requests if there are too many :|\n\n        _this.setState({\n          resourceAreaWidthOverride: newWidth\n        }, _this.ensureScrollGridResize);\n      });\n      dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n    }\n  };\n\n  ResourceTimelineViewLayout.prototype.destroySpreadsheetResizing = function () {\n    if (this.spreadsheetResizerDragging) {\n      this.spreadsheetResizerDragging.destroy();\n    }\n  };\n\n  return ResourceTimelineViewLayout;\n}(BaseComponent);\n\nvar ResourceTimelineView =\n/** @class */\nfunction (_super) {\n  __extends(ResourceTimelineView, _super);\n\n  function ResourceTimelineView(props, context) {\n    var _this = _super.call(this, props, context) || this;\n\n    _this.processColOptions = memoize(processColOptions);\n    _this.buildTimelineDateProfile = memoize(buildTimelineDateProfile);\n    _this.hasNesting = memoize(hasNesting);\n    _this.buildRowNodes = memoize(buildRowNodes);\n    _this.layoutRef = createRef();\n    _this.rowNodes = [];\n    _this.renderedRowNodes = [];\n    _this.buildRowIndex = memoize(buildRowIndex);\n\n    _this.handleSlatCoords = function (slatCoords) {\n      _this.setState({\n        slatCoords: slatCoords\n      });\n    };\n\n    _this.handleRowCoords = function (rowCoords) {\n      _this.rowCoords = rowCoords;\n\n      _this.scrollResponder.update(false); // TODO: could eliminate this if rowCoords lived in state\n\n    };\n\n    _this.handleMaxCushionWidth = function (slotCushionMaxWidth) {\n      _this.setState({\n        slotCushionMaxWidth: Math.ceil(slotCushionMaxWidth) // for less rerendering TODO: DRY\n\n      });\n    }; // Scrolling\n    // ------------------------------------------------------------------------------------------------------------------\n    // this is useful for scrolling prev/next dates while resource is scrolled down\n\n\n    _this.handleScrollLeftRequest = function (scrollLeft) {\n      var layout = _this.layoutRef.current;\n      layout.forceTimeScroll(scrollLeft);\n    };\n\n    _this.handleScrollRequest = function (request) {\n      var rowCoords = _this.rowCoords;\n      var layout = _this.layoutRef.current;\n      var rowId = request.rowId || request.resourceId;\n\n      if (rowCoords) {\n        if (rowId) {\n          var rowIdToIndex = _this.buildRowIndex(_this.renderedRowNodes);\n\n          var index = rowIdToIndex[rowId];\n\n          if (index != null) {\n            var scrollTop = request.fromBottom != null ? rowCoords.bottoms[index] - request.fromBottom : // pixels from bottom edge\n            rowCoords.tops[index] // just use top edge\n            ;\n            layout.forceResourceScroll(scrollTop);\n          }\n        }\n\n        return true;\n      }\n\n      return null;\n    }; // Resource INDIVIDUAL-Column Area Resizing\n    // ------------------------------------------------------------------------------------------\n\n\n    _this.handleColWidthChange = function (colWidths) {\n      _this.setState({\n        spreadsheetColWidths: colWidths\n      });\n    };\n\n    _this.state = {\n      resourceAreaWidth: context.options.resourceAreaWidth,\n      spreadsheetColWidths: []\n    };\n    return _this;\n  }\n\n  ResourceTimelineView.prototype.render = function () {\n    var _this = this;\n\n    var _a = this,\n        props = _a.props,\n        state = _a.state,\n        context = _a.context;\n\n    var options = context.options,\n        viewSpec = context.viewSpec;\n\n    var _b = this.processColOptions(context.options),\n        superHeaderRendering = _b.superHeaderRendering,\n        groupSpecs = _b.groupSpecs,\n        orderSpecs = _b.orderSpecs,\n        isVGrouping = _b.isVGrouping,\n        colSpecs = _b.colSpecs;\n\n    var tDateProfile = this.buildTimelineDateProfile(props.dateProfile, context.dateEnv, options, context.dateProfileGenerator);\n    var rowNodes = this.rowNodes = this.buildRowNodes(props.resourceStore, groupSpecs, orderSpecs, isVGrouping, props.resourceEntityExpansions, options.resourcesInitiallyExpanded);\n    var extraClassNames = ['fc-resource-timeline', this.hasNesting(rowNodes) ? '' : 'fc-resource-timeline-flat', 'fc-timeline', options.eventOverlap === false ? 'fc-timeline-overlap-disabled' : 'fc-timeline-overlap-enabled'];\n    var slotMinWidth = options.slotMinWidth;\n    var slatCols = buildSlatCols(tDateProfile, slotMinWidth || this.computeFallbackSlotMinWidth(tDateProfile));\n    return createElement(ViewRoot, {\n      viewSpec: viewSpec\n    }, function (rootElRef, classNames) {\n      return createElement(\"div\", {\n        ref: rootElRef,\n        className: extraClassNames.concat(classNames).join(' ')\n      }, createElement(ResourceTimelineViewLayout, {\n        ref: _this.layoutRef,\n        forPrint: props.forPrint,\n        isHeightAuto: props.isHeightAuto,\n        spreadsheetCols: buildSpreadsheetCols(colSpecs, state.spreadsheetColWidths, ''),\n        spreadsheetHeaderRows: function (contentArg) {\n          return createElement(SpreadsheetHeader // TODO: rename to SpreadsheetHeaderRows\n          , {\n            superHeaderRendering: superHeaderRendering,\n            colSpecs: colSpecs,\n            onColWidthChange: _this.handleColWidthChange,\n            rowInnerHeights: contentArg.rowSyncHeights\n          });\n        },\n        spreadsheetBodyRows: function (contentArg) {\n          return createElement(Fragment, null, _this.renderSpreadsheetRows(rowNodes, colSpecs, contentArg.rowSyncHeights));\n        },\n        timeCols: slatCols,\n        timeHeaderContent: function (contentArg) {\n          return createElement(TimelineHeader, {\n            clientWidth: contentArg.clientWidth,\n            clientHeight: contentArg.clientHeight,\n            tableMinWidth: contentArg.tableMinWidth,\n            tableColGroupNode: contentArg.tableColGroupNode,\n            dateProfile: props.dateProfile,\n            tDateProfile: tDateProfile,\n            slatCoords: state.slatCoords,\n            rowInnerHeights: contentArg.rowSyncHeights,\n            onMaxCushionWidth: slotMinWidth ? null : _this.handleMaxCushionWidth\n          });\n        },\n        timeBodyContent: function (contentArg) {\n          return createElement(ResourceTimelineGrid, {\n            dateProfile: props.dateProfile,\n            clientWidth: contentArg.clientWidth,\n            clientHeight: contentArg.clientHeight,\n            tableMinWidth: contentArg.tableMinWidth,\n            tableColGroupNode: contentArg.tableColGroupNode,\n            expandRows: contentArg.expandRows,\n            tDateProfile: tDateProfile,\n            rowNodes: rowNodes,\n            businessHours: props.businessHours,\n            dateSelection: props.dateSelection,\n            eventStore: props.eventStore,\n            eventUiBases: props.eventUiBases,\n            eventSelection: props.eventSelection,\n            eventDrag: props.eventDrag,\n            eventResize: props.eventResize,\n            resourceStore: props.resourceStore,\n            nextDayThreshold: context.options.nextDayThreshold,\n            rowInnerHeights: contentArg.rowSyncHeights,\n            onSlatCoords: _this.handleSlatCoords,\n            onRowCoords: _this.handleRowCoords,\n            onScrollLeftRequest: _this.handleScrollLeftRequest,\n            onRowHeightChange: contentArg.reportRowHeightChange\n          });\n        }\n      }));\n    });\n  };\n\n  ResourceTimelineView.prototype.renderSpreadsheetRows = function (nodes, colSpecs, rowSyncHeights) {\n    return nodes.map(function (node, index) {\n      if (node.group) {\n        return createElement(SpreadsheetGroupRow, {\n          key: node.id,\n          id: node.id,\n          spreadsheetColCnt: colSpecs.length,\n          isExpanded: node.isExpanded,\n          group: node.group,\n          innerHeight: rowSyncHeights[index] || ''\n        });\n      }\n\n      if (node.resource) {\n        return createElement(SpreadsheetRow, {\n          key: node.id,\n          colSpecs: colSpecs,\n          rowSpans: node.rowSpans,\n          depth: node.depth,\n          isExpanded: node.isExpanded,\n          hasChildren: node.hasChildren,\n          resource: node.resource,\n          innerHeight: rowSyncHeights[index] || ''\n        });\n      }\n\n      return null;\n    });\n  };\n\n  ResourceTimelineView.prototype.componentDidMount = function () {\n    this.renderedRowNodes = this.rowNodes;\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n  };\n\n  ResourceTimelineView.prototype.getSnapshotBeforeUpdate = function () {\n    if (!this.props.forPrint) {\n      // because print-view is always zero?\n      return {\n        resourceScroll: this.queryResourceScroll()\n      };\n    }\n\n    return {};\n  };\n\n  ResourceTimelineView.prototype.componentDidUpdate = function (prevProps, prevState, snapshot) {\n    this.renderedRowNodes = this.rowNodes;\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n\n    if (snapshot.resourceScroll) {\n      this.handleScrollRequest(snapshot.resourceScroll); // TODO: this gets triggered too often\n    }\n  };\n\n  ResourceTimelineView.prototype.componentWillUnmount = function () {\n    this.scrollResponder.detach();\n  };\n\n  ResourceTimelineView.prototype.computeFallbackSlotMinWidth = function (tDateProfile) {\n    return Math.max(30, (this.state.slotCushionMaxWidth || 0) / tDateProfile.slotsPerLabel);\n  };\n\n  ResourceTimelineView.prototype.queryResourceScroll = function () {\n    var _a = this,\n        rowCoords = _a.rowCoords,\n        renderedRowNodes = _a.renderedRowNodes;\n\n    if (rowCoords) {\n      var layout = this.layoutRef.current;\n      var trBottoms = rowCoords.bottoms;\n      var scrollTop = layout.getResourceScroll();\n      var scroll_1 = {};\n\n      for (var i = 0; i < trBottoms.length; i += 1) {\n        var rowNode = renderedRowNodes[i];\n        var elBottom = trBottoms[i] - scrollTop; // from the top of the scroller\n\n        if (elBottom > 0) {\n          scroll_1.rowId = rowNode.id;\n          scroll_1.fromBottom = elBottom;\n          break;\n        }\n      }\n\n      return scroll_1;\n    }\n\n    return null;\n  };\n\n  return ResourceTimelineView;\n}(BaseComponent);\n\nResourceTimelineView.addStateEquality({\n  spreadsheetColWidths: isArraysEqual\n});\n\nfunction buildRowIndex(rowNodes) {\n  var rowIdToIndex = {};\n\n  for (var i = 0; i < rowNodes.length; i += 1) {\n    rowIdToIndex[rowNodes[i].id] = i;\n  }\n\n  return rowIdToIndex;\n}\n\nfunction buildSpreadsheetCols(colSpecs, forcedWidths, fallbackWidth) {\n  if (fallbackWidth === void 0) {\n    fallbackWidth = '';\n  }\n\n  return colSpecs.map(function (colSpec, i) {\n    return {\n      className: colSpec.isMain ? 'fc-main-col' : '',\n      width: forcedWidths[i] || colSpec.width || fallbackWidth\n    };\n  });\n}\n\nfunction hasNesting(nodes) {\n  for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n    var node = nodes_1[_i];\n\n    if (node.group) {\n      return true;\n    }\n\n    if (node.resource) {\n      if (node.hasChildren) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction processColOptions(options) {\n  var allColSpecs = options.resourceAreaColumns || [];\n  var superHeaderRendering = null;\n\n  if (!allColSpecs.length) {\n    allColSpecs.push({\n      headerClassNames: options.resourceAreaHeaderClassNames,\n      headerContent: options.resourceAreaHeaderContent || 'Resources',\n      headerDidMount: options.resourceAreaHeaderDidMount,\n      headerWillUnmount: options.resourceAreaHeaderWillUnmount\n    });\n  } else if (options.resourceAreaHeaderContent) {\n    // weird way to determine if content\n    superHeaderRendering = {\n      headerClassNames: options.resourceAreaHeaderClassNames,\n      headerContent: options.resourceAreaHeaderContent,\n      headerDidMount: options.resourceAreaHeaderDidMount,\n      headerWillUnmount: options.resourceAreaHeaderWillUnmount\n    };\n  }\n\n  var plainColSpecs = [];\n  var groupColSpecs = []; // part of the colSpecs, but filtered out in order to put first\n\n  var groupSpecs = [];\n  var isVGrouping = false;\n\n  for (var _i = 0, allColSpecs_1 = allColSpecs; _i < allColSpecs_1.length; _i++) {\n    var colSpec = allColSpecs_1[_i];\n\n    if (colSpec.group) {\n      groupColSpecs.push(__assign(__assign({}, colSpec), {\n        cellClassNames: colSpec.cellClassNames || options.resourceGroupLabelClassNames,\n        cellContent: colSpec.cellContent || options.resourceGroupLabelContent,\n        cellDidMount: colSpec.cellDidMount || options.resourceGroupLabelDidMount,\n        cellWillUnmount: colSpec.cellWillUnmount || options.resourceGroupLaneWillUnmount\n      }));\n    } else {\n      plainColSpecs.push(colSpec);\n    }\n  } // BAD: mutates a user-supplied option\n\n\n  var mainColSpec = plainColSpecs[0];\n  mainColSpec.isMain = true;\n  mainColSpec.cellClassNames = mainColSpec.cellClassNames || options.resourceLabelClassNames;\n  mainColSpec.cellContent = mainColSpec.cellContent || options.resourceLabelContent;\n  mainColSpec.cellDidMount = mainColSpec.cellDidMount || options.resourceLabelDidMount;\n  mainColSpec.cellWillUnmount = mainColSpec.cellWillUnmount || options.resourceLabelWillUnmount;\n\n  if (groupColSpecs.length) {\n    groupSpecs = groupColSpecs;\n    isVGrouping = true;\n  } else {\n    var hGroupField = options.resourceGroupField;\n\n    if (hGroupField) {\n      groupSpecs.push({\n        field: hGroupField,\n        labelClassNames: options.resourceGroupLabelClassNames,\n        labelContent: options.resourceGroupLabelContent,\n        labelDidMount: options.resourceGroupLabelDidMount,\n        labelWillUnmount: options.resourceGroupLabelWillUnmount,\n        laneClassNames: options.resourceGroupLaneClassNames,\n        laneContent: options.resourceGroupLaneContent,\n        laneDidMount: options.resourceGroupLaneDidMount,\n        laneWillUnmount: options.resourceGroupLaneWillUnmount\n      });\n    }\n  }\n\n  var allOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;\n  var plainOrderSpecs = [];\n\n  for (var _a = 0, allOrderSpecs_1 = allOrderSpecs; _a < allOrderSpecs_1.length; _a++) {\n    var orderSpec = allOrderSpecs_1[_a];\n    var isGroup = false;\n\n    for (var _b = 0, groupSpecs_1 = groupSpecs; _b < groupSpecs_1.length; _b++) {\n      var groupSpec = groupSpecs_1[_b];\n\n      if (groupSpec.field === orderSpec.field) {\n        groupSpec.order = orderSpec.order; // -1, 0, 1\n\n        isGroup = true;\n        break;\n      }\n    }\n\n    if (!isGroup) {\n      plainOrderSpecs.push(orderSpec);\n    }\n  }\n\n  return {\n    superHeaderRendering: superHeaderRendering,\n    isVGrouping: isVGrouping,\n    groupSpecs: groupSpecs,\n    colSpecs: groupColSpecs.concat(plainColSpecs),\n    orderSpecs: plainOrderSpecs\n  };\n}\n\nvar main = createPlugin({\n  deps: [premiumCommonPlugin, resourceCommonPlugin, timelinePlugin],\n  initialView: 'resourceTimelineDay',\n  views: {\n    resourceTimeline: {\n      type: 'timeline',\n      component: ResourceTimelineView,\n      needsResourceData: true,\n      resourceAreaWidth: '30%',\n      resourcesInitiallyExpanded: true,\n      eventResizableFromStart: true // TODO: not DRY with this same setting in the main timeline config\n\n    },\n    resourceTimelineDay: {\n      type: 'resourceTimeline',\n      duration: {\n        days: 1\n      }\n    },\n    resourceTimelineWeek: {\n      type: 'resourceTimeline',\n      duration: {\n        weeks: 1\n      }\n    },\n    resourceTimelineMonth: {\n      type: 'resourceTimeline',\n      duration: {\n        months: 1\n      }\n    },\n    resourceTimelineYear: {\n      type: 'resourceTimeline',\n      duration: {\n        years: 1\n      }\n    }\n  }\n});\nexport default main;\nexport { ResourceTimelineLane, ResourceTimelineView, SpreadsheetRow };","map":{"version":3,"sources":["src/ExpanderIcon.tsx","src/spreadsheet-cell-util.ts","src/SpreadsheetIndividualCellInner.tsx","src/SpreadsheetIndividualCell.tsx","src/SpreadsheetGroupCell.tsx","src/SpreadsheetRow.tsx","src/SpreadsheetGroupRow.tsx","src/SpreadsheetHeader.tsx","src/ResourceTimelineLaneMisc.tsx","src/ResourceTimelineLane.tsx","src/DividerRow.tsx","src/ResourceTimelineLanesBody.tsx","src/ResourceTimelineLanes.tsx","src/ResourceTimelineGrid.tsx","src/ResourceTimelineViewLayout.tsx","src/ResourceTimelineView.tsx","src/main.ts"],"names":["refineHookProps"],"mappings":"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","sourcesContent":["import { createElement, VNode, Fragment } from '@fullcalendar/common'\n\n/*\nRenders the DOM responsible for the subrow expander area,\nas well as the space before it (used to align expanders of similar depths)\n*/\nexport function ExpanderIcon({ depth, hasChildren, isExpanded, onExpanderClick }): VNode {\n  let nodes: VNode[] = []\n\n  for (let i = 0; i < depth; i += 1) {\n    nodes.push(\n      <span className=\"fc-icon\" />,\n    )\n  }\n\n  let iconClassNames = ['fc-icon']\n  if (hasChildren) {\n    if (isExpanded) {\n      iconClassNames.push('fc-icon-minus-square')\n    } else {\n      iconClassNames.push('fc-icon-plus-square')\n    }\n  }\n\n  nodes.push(\n    <span\n      className={'fc-datagrid-expander' + (hasChildren ? '' : ' fc-datagrid-expander-placeholder')}\n      onClick={onExpanderClick}\n    >\n      <span className={iconClassNames.join(' ')} />\n    </span>,\n  )\n\n  return createElement(Fragment, {}, ...nodes)\n}\n","import { ViewContext, ViewApi } from '@fullcalendar/common'\nimport { Resource, ResourceApi } from '@fullcalendar/resource-common'\n\n// hook props\n// ----------\n\nexport interface HookPropsInput {\n  resource: Resource\n  fieldValue: any\n  context: ViewContext\n}\n\nexport interface HookProps {\n  resource: ResourceApi\n  fieldValue: any\n  view: ViewApi\n}\n\nexport function refineHookProps(raw: HookPropsInput): HookProps {\n  return {\n    resource: new ResourceApi(raw.context, raw.resource),\n    fieldValue: raw.fieldValue,\n    view: raw.context.viewApi,\n  }\n}\n","import { createElement, BaseComponent, Fragment, ContentHook } from '@fullcalendar/common'\nimport { ColSpec } from '@fullcalendar/resource-common'\nimport { HookProps } from './spreadsheet-cell-util'\n\nexport interface SpreadsheetIndividualCellInnerProps {\n  hookProps: HookProps\n  colSpec: ColSpec\n}\n\nexport class SpreadsheetIndividualCellInner extends BaseComponent<SpreadsheetIndividualCellInnerProps> { // doesn't need context?\n  render() {\n    let { props } = this\n\n    return (\n      <ContentHook hookProps={props.hookProps} content={props.colSpec.cellContent} defaultContent={renderResourceInner}>\n        {(innerElRef, innerContent) => (\n          <span className=\"fc-datagrid-cell-main\" ref={innerElRef}>\n            {innerContent}\n          </span>\n        )}\n      </ContentHook>\n    )\n  }\n}\n\nfunction renderResourceInner(hookProps) {\n  return hookProps.fieldValue || <Fragment>&nbsp;</Fragment>\n}\n","import {\n  createElement, BaseComponent, CssDimValue, MountHook,\n  buildClassNameNormalizer, memoizeObjArg,\n} from '@fullcalendar/common'\nimport { Resource, ColSpec } from '@fullcalendar/resource-common'\nimport { ExpanderIcon } from './ExpanderIcon'\nimport { refineHookProps, HookProps } from './spreadsheet-cell-util'\nimport { SpreadsheetIndividualCellInner } from './SpreadsheetIndividualCellInner'\n\nexport interface SpreadsheetIndividualCellProps {\n  colSpec: ColSpec\n  resource: Resource\n  fieldValue: any\n  depth: number\n  hasChildren: boolean\n  isExpanded: boolean\n  innerHeight: CssDimValue\n}\n\n// worth making a PureComponent? (because of innerHeight)\nexport class SpreadsheetIndividualCell extends BaseComponent<SpreadsheetIndividualCellProps> {\n  refineHookProps = memoizeObjArg(refineHookProps)\n  normalizeClassNames = buildClassNameNormalizer<HookProps>()\n\n  render() {\n    let { props, context } = this\n    let { colSpec } = props\n\n    let hookProps = this.refineHookProps({\n      resource: props.resource,\n      fieldValue: props.fieldValue,\n      context,\n    })\n    let customClassNames = this.normalizeClassNames(colSpec.cellClassNames, hookProps)\n\n    return (\n      <MountHook hookProps={hookProps} didMount={colSpec.cellDidMount} willUnmount={colSpec.cellWillUnmount}>\n        {(rootElRef) => (\n          <td\n            ref={rootElRef}\n            role=\"gridcell\"\n            data-resource-id={props.resource.id}\n            className={[\n              'fc-datagrid-cell',\n              'fc-resource',\n            ].concat(customClassNames).join(' ')}\n          >\n            <div className=\"fc-datagrid-cell-frame\" style={{ height: props.innerHeight }}>\n              <div className=\"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\">\n                {colSpec.isMain && (\n                  <ExpanderIcon\n                    depth={props.depth}\n                    hasChildren={props.hasChildren}\n                    isExpanded={props.isExpanded}\n                    onExpanderClick={this.onExpanderClick}\n                  />\n                )}\n                <SpreadsheetIndividualCellInner hookProps={hookProps} colSpec={colSpec} />\n              </div>\n            </div>\n          </td>\n        )}\n      </MountHook>\n    )\n  }\n\n  onExpanderClick = (ev: UIEvent) => {\n    let { props } = this\n\n    if (props.hasChildren) {\n      this.context.dispatch({\n        type: 'SET_RESOURCE_ENTITY_EXPANDED',\n        id: props.resource.id,\n        isExpanded: !props.isExpanded,\n      })\n    }\n  }\n}\n","import { createElement, BaseComponent, Fragment, RenderHook } from '@fullcalendar/common'\nimport { ColSpec, ColCellContentArg } from '@fullcalendar/resource-common'\n\nexport interface SpreadsheetGroupCellProps {\n  colSpec: ColSpec\n  fieldValue: any\n  rowSpan: number\n}\n\n// for VERTICAL cell grouping, in spreadsheet area\nexport class SpreadsheetGroupCell extends BaseComponent<SpreadsheetGroupCellProps> {\n  render() {\n    let { props, context } = this\n    let { colSpec } = props\n    let hookProps: ColCellContentArg = {\n      groupValue: props.fieldValue,\n      view: context.viewApi,\n    }\n\n    // a grouped cell. no data that is specific to this specific resource\n    // `colSpec` is for the group. a GroupSpec :(\n    return (\n      <RenderHook<ColCellContentArg>\n        hookProps={hookProps}\n        classNames={colSpec.cellClassNames}\n        content={colSpec.cellContent}\n        defaultContent={renderGroupInner}\n        didMount={colSpec.cellDidMount}\n        willUnmount={colSpec.cellWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          // TODO: make data-attr with group value?\n          <td\n            ref={rootElRef}\n            role=\"gridcell\"\n            rowSpan={props.rowSpan}\n            className={['fc-datagrid-cell', 'fc-resource-group'].concat(classNames).join(' ')}\n          >\n            <div className=\"fc-datagrid-cell-frame fc-datagrid-cell-frame-liquid\">\n              {/* ^needed for stickiness in some browsers */}\n              <div className=\"fc-datagrid-cell-cushion fc-sticky\" ref={innerElRef}>\n                {innerContent}\n              </div>\n            </div>\n          </td>\n        )}\n      </RenderHook>\n    )\n  }\n}\n\nfunction renderGroupInner(hookProps) {\n  return hookProps.groupValue || <Fragment>&nbsp;</Fragment>\n}\n","import { createElement, BaseComponent, ViewContext, isArraysEqual, CssDimValue } from '@fullcalendar/common'\nimport { Resource, buildResourceFields, ColSpec, getPublicId } from '@fullcalendar/resource-common'\nimport { SpreadsheetIndividualCell } from './SpreadsheetIndividualCell'\nimport { SpreadsheetGroupCell } from './SpreadsheetGroupCell'\n\nexport interface SpreadsheetRowProps {\n  colSpecs: ColSpec[]\n  rowSpans: number[]\n  depth: number\n  isExpanded: boolean\n  hasChildren: boolean\n  resource: Resource\n  innerHeight: CssDimValue // bad name! inner vs innerinner\n}\n\nexport class SpreadsheetRow extends BaseComponent<SpreadsheetRowProps, ViewContext> {\n  render() {\n    let { props } = this\n    let { resource, rowSpans, depth } = props\n    let resourceFields = buildResourceFields(resource) // slightly inefficient. already done up the call stack\n\n    return (\n      <tr role=\"row\">\n        {props.colSpecs.map((colSpec, i) => {\n          let rowSpan = rowSpans[i]\n\n          if (rowSpan === 0) { // not responsible for group-based rows. VRowGroup is\n            return null\n          }\n\n          if (rowSpan == null) {\n            rowSpan = 1\n          }\n\n          let fieldValue = colSpec.field ? resourceFields[colSpec.field] :\n            (resource.title || getPublicId(resource.id))\n\n          if (rowSpan > 1) {\n            return (\n              <SpreadsheetGroupCell\n                key={i} // eslint-disable-line react/no-array-index-key\n                colSpec={colSpec}\n                fieldValue={fieldValue}\n                rowSpan={rowSpan}\n              />\n            )\n          }\n\n          return (\n            <SpreadsheetIndividualCell\n              key={i} // eslint-disable-line react/no-array-index-key\n              colSpec={colSpec}\n              resource={resource}\n              fieldValue={fieldValue}\n              depth={depth}\n              hasChildren={props.hasChildren}\n              isExpanded={props.isExpanded}\n              innerHeight={props.innerHeight}\n            />\n          )\n        })}\n      </tr>\n    )\n  }\n}\n\nSpreadsheetRow.addPropsEquality({\n  rowSpans: isArraysEqual,\n})\n","import { createElement, Fragment, BaseComponent, ViewContext, CssDimValue, createRef, RenderHook, RefObject } from '@fullcalendar/common'\nimport { Group, isGroupsEqual, ColCellContentArg } from '@fullcalendar/resource-common'\nimport { ExpanderIcon } from './ExpanderIcon'\n\nexport interface SpreadsheetGroupRowProps {\n  spreadsheetColCnt: number\n  id: string // 'field:value'\n  isExpanded: boolean\n  group: Group\n  innerHeight: CssDimValue\n}\n\n// for HORIZONTAL cell grouping, in spreadsheet area\nexport class SpreadsheetGroupRow extends BaseComponent<SpreadsheetGroupRowProps, ViewContext> {\n  innerInnerRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n\n  render() {\n    let { props, context } = this\n    let hookProps: ColCellContentArg = { groupValue: props.group.value, view: context.viewApi }\n    let spec = props.group.spec\n\n    return (\n      <tr role=\"row\">\n        <RenderHook<ColCellContentArg>\n          hookProps={hookProps}\n          classNames={spec.labelClassNames}\n          content={spec.labelContent}\n          defaultContent={renderCellInner}\n          didMount={spec.labelDidMount}\n          willUnmount={spec.labelWillUnmount}\n        >\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <th\n              ref={rootElRef}\n              // ARIA TODO: not really a columnheader\n              // extremely tedious to make this aria-compliant,\n              // to assign multiple headers to each cell\n              // https://www.w3.org/WAI/tutorials/tables/multi-level/\n              role=\"columnheader\"\n              scope=\"colgroup\"\n              colSpan={props.spreadsheetColCnt}\n              className={\n                [\n                  'fc-datagrid-cell',\n                  'fc-resource-group',\n                  context.theme.getClass('tableCellShaded'),\n                ].concat(classNames).join(' ')\n              }\n            >\n              <div className=\"fc-datagrid-cell-frame\" style={{ height: props.innerHeight }}>\n                <div className=\"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\" ref={this.innerInnerRef}>\n                  <ExpanderIcon\n                    depth={0}\n                    hasChildren\n                    isExpanded={props.isExpanded}\n                    onExpanderClick={this.onExpanderClick}\n                  />\n                  <span className=\"fc-datagrid-cell-main\" ref={innerElRef}>\n                    {innerContent}\n                  </span>\n                </div>\n              </div>\n            </th>\n          )}\n        </RenderHook>\n      </tr>\n    )\n  }\n\n  onExpanderClick = () => {\n    let { props } = this\n\n    this.context.dispatch({\n      type: 'SET_RESOURCE_ENTITY_EXPANDED',\n      id: props.id,\n      isExpanded: !props.isExpanded,\n    })\n  }\n}\n\nSpreadsheetGroupRow.addPropsEquality({\n  group: isGroupsEqual,\n})\n\nfunction renderCellInner(hookProps) {\n  return hookProps.groupValue || <Fragment>&nbsp;</Fragment>\n}\n","import {\n  VNode, createElement, Fragment,\n  BaseComponent, ElementDragging, elementClosest, PointerDragEvent, RefMap, findElements, RenderHook,\n} from '@fullcalendar/common'\nimport { ColSpec, ColHeaderContentArg, ColHeaderRenderHooks } from '@fullcalendar/resource-common'\n\nexport interface SpreadsheetHeaderProps {\n  superHeaderRendering: ColHeaderRenderHooks\n  colSpecs: ColSpec[]\n  rowInnerHeights: number[]\n  onColWidthChange?: (colWidths: number[]) => void\n}\n\nconst SPREADSHEET_COL_MIN_WIDTH = 20\n\nexport class SpreadsheetHeader extends BaseComponent<SpreadsheetHeaderProps> {\n  private resizerElRefs = new RefMap<HTMLElement>(this._handleColResizerEl.bind(this))\n  private colDraggings: { [index: string]: ElementDragging } = {}\n\n  render() {\n    let { colSpecs, superHeaderRendering, rowInnerHeights } = this.props\n    let hookProps: ColHeaderContentArg = { view: this.context.viewApi }\n    let rowNodes: VNode[] = []\n\n    rowInnerHeights = rowInnerHeights.slice() // copy, because we're gonna pop\n\n    if (superHeaderRendering) {\n      let rowInnerHeight = rowInnerHeights.shift()\n      rowNodes.push(\n        <tr key=\"row-super\" role=\"row\">\n          <RenderHook\n            hookProps={hookProps}\n            classNames={superHeaderRendering.headerClassNames}\n            content={superHeaderRendering.headerContent}\n            didMount={superHeaderRendering.headerDidMount}\n            willUnmount={superHeaderRendering.headerWillUnmount}\n          >\n            {(rootElRef, classNames, innerElRef, innerContent) => (\n              <th\n                ref={rootElRef}\n                role=\"columnheader\"\n                scope=\"colgroup\"\n                colSpan={colSpecs.length}\n                className={[\n                  'fc-datagrid-cell',\n                  'fc-datagrid-cell-super',\n                ].concat(classNames).join(' ')}\n              >\n                <div className=\"fc-datagrid-cell-frame\" style={{ height: rowInnerHeight }}>\n                  <div className=\"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\" ref={innerElRef}>\n                    {innerContent}\n                  </div>\n                </div>\n              </th>\n            )}\n          </RenderHook>\n        </tr>,\n      )\n    }\n\n    let rowInnerHeight = rowInnerHeights.shift()\n    rowNodes.push(\n      <tr key=\"row\" role=\"row\">\n        {colSpecs.map((colSpec, i) => {\n          let isLastCol = i === (colSpecs.length - 1)\n\n          // need empty inner div for abs positioning for resizer\n          return (\n            <RenderHook\n              key={i} // eslint-disable-line react/no-array-index-key\n              hookProps={hookProps}\n              classNames={colSpec.headerClassNames}\n              content={colSpec.headerContent}\n              didMount={colSpec.headerDidMount}\n              willUnmount={colSpec.headerWillUnmount}\n            >\n              {(rootElRef, classNames, innerElRef, innerContent) => (\n                <th\n                  ref={rootElRef}\n                  role=\"columnheader\"\n                  className={['fc-datagrid-cell'].concat(classNames).join(' ')}\n                >\n                  <div className=\"fc-datagrid-cell-frame\" style={{ height: rowInnerHeight }}>\n                    <div className=\"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\">\n                      {colSpec.isMain && (\n                        <span className=\"fc-datagrid-expander fc-datagrid-expander-placeholder\">\n                          <span className=\"fc-icon\" />\n                        </span>\n                      )}\n                      <span className=\"fc-datagrid-cell-main\" ref={innerElRef}>\n                        {innerContent}\n                      </span>\n                    </div>\n                    {!isLastCol &&\n                      <div className=\"fc-datagrid-cell-resizer\" ref={this.resizerElRefs.createRef(i)} />}\n                  </div>\n                </th>\n              )}\n            </RenderHook>\n          )\n        })}\n      </tr>,\n    )\n\n    return (<Fragment>{rowNodes}</Fragment>)\n  }\n\n  _handleColResizerEl(resizerEl: HTMLElement | null, index: string) {\n    let { colDraggings } = this\n\n    if (!resizerEl) {\n      let dragging = colDraggings[index]\n\n      if (dragging) {\n        dragging.destroy()\n        delete colDraggings[index]\n      }\n    } else {\n      let dragging = this.initColResizing(resizerEl, parseInt(index, 10))\n\n      if (dragging) {\n        colDraggings[index] = dragging\n      }\n    }\n  }\n\n  initColResizing(resizerEl: HTMLElement, index: number) {\n    let { pluginHooks, isRtl } = this.context\n    let { onColWidthChange } = this.props\n    let ElementDraggingImpl = pluginHooks.elementDraggingImpl\n\n    if (ElementDraggingImpl) {\n      let dragging = new ElementDraggingImpl(resizerEl)\n      let startWidth: number // of just the single column\n      let currentWidths: number[] // of all columns\n\n      dragging.emitter.on('dragstart', () => {\n        let allCells = findElements(elementClosest(resizerEl, 'tr'), 'th')\n\n        currentWidths = allCells.map((cellEl) => (\n          cellEl.getBoundingClientRect().width\n        ))\n        startWidth = currentWidths[index]\n      })\n\n      dragging.emitter.on('dragmove', (pev: PointerDragEvent) => {\n        currentWidths[index] = Math.max(startWidth + pev.deltaX * (isRtl ? -1 : 1), SPREADSHEET_COL_MIN_WIDTH)\n\n        if (onColWidthChange) {\n          onColWidthChange(currentWidths.slice()) // send a copy since currentWidths continues to be mutated\n        }\n      })\n\n      dragging.setAutoScrollEnabled(false) // because gets weird with auto-scrolling time area\n\n      return dragging\n    }\n\n    return null\n  }\n}\n","import { createElement, BaseComponent, ContentHook } from '@fullcalendar/common'\nimport { Resource, ResourceApi, ResourceLaneContentArg } from '@fullcalendar/resource-common'\n\nexport interface ResourceTimelineLaneMiscProps {\n  resource: Resource\n}\n\nexport class ResourceTimelineLaneMisc extends BaseComponent<ResourceTimelineLaneMiscProps> {\n  render() {\n    let { props, context } = this\n    let hookProps: ResourceLaneContentArg = { resource: new ResourceApi(context, props.resource) } // just easier to make directly\n\n    return (\n      <ContentHook hookProps={hookProps} content={context.options.resourceLaneContent}>\n        {(innerElRef, innerContent) => (\n          innerContent && // TODO: test how this would interfere with height\n            <div className=\"fc-timeline-lane-misc\" ref={innerElRef}>{innerContent}</div>\n        )}\n      </ContentHook>\n    )\n  }\n}\n","import {\n  createElement, Ref, BaseComponent, CssDimValue,\n  buildClassNameNormalizer, MountHook, elementClosest, memoizeObjArg,\n} from '@fullcalendar/common'\nimport { Resource, ResourceApi, ResourceLaneContentArg, ResourceLaneHookPropsInput } from '@fullcalendar/resource-common'\nimport { TimelineLane, TimelineLaneCoreProps } from '@fullcalendar/timeline'\nimport { ResourceTimelineLaneMisc } from './ResourceTimelineLaneMisc'\n\nexport interface ResourceTimelineLaneProps extends TimelineLaneCoreProps {\n  elRef: Ref<HTMLTableRowElement>\n  resource: Resource\n  innerHeight: CssDimValue\n  onHeightChange?: (rowEl: HTMLTableRowElement, isStable: boolean) => void\n}\n\nexport class ResourceTimelineLane extends BaseComponent<ResourceTimelineLaneProps> {\n  refineHookProps = memoizeObjArg(refineHookProps)\n  normalizeClassNames = buildClassNameNormalizer<ResourceLaneContentArg>()\n\n  render() {\n    let { props, context } = this\n    let { options } = context\n    let hookProps = this.refineHookProps({ resource: props.resource, context })\n    let customClassNames = this.normalizeClassNames(options.resourceLaneClassNames, hookProps)\n\n    return (\n      <tr ref={props.elRef}>\n        <MountHook hookProps={hookProps} didMount={options.resourceLaneDidMount} willUnmount={options.resourceLaneWillUnmount}>\n          {(rootElRef) => (\n            <td\n              ref={rootElRef}\n              className={['fc-timeline-lane', 'fc-resource'].concat(customClassNames).join(' ')}\n              data-resource-id={props.resource.id}\n            >\n              <div className=\"fc-timeline-lane-frame\" style={{ height: props.innerHeight }}>\n                <ResourceTimelineLaneMisc resource={props.resource} />\n                <TimelineLane\n                  dateProfile={props.dateProfile}\n                  tDateProfile={props.tDateProfile}\n                  nowDate={props.nowDate}\n                  todayRange={props.todayRange}\n                  nextDayThreshold={props.nextDayThreshold}\n                  businessHours={props.businessHours}\n                  eventStore={props.eventStore}\n                  eventUiBases={props.eventUiBases}\n                  dateSelection={props.dateSelection}\n                  eventSelection={props.eventSelection}\n                  eventDrag={props.eventDrag}\n                  eventResize={props.eventResize}\n                  timelineCoords={props.timelineCoords}\n                  onHeightChange={this.handleHeightChange}\n                  resourceId={props.resource.id}\n                />\n              </div>\n            </td>\n          )}\n        </MountHook>\n      </tr>\n    ) // important NOT to do liquid-height. dont want to shrink height smaller than content\n  }\n\n  handleHeightChange = (innerEl: HTMLElement, isStable: boolean) => {\n    if (this.props.onHeightChange) {\n      this.props.onHeightChange(\n        // would want to use own <tr> ref, but not guaranteed to be ready when this fires\n        elementClosest(innerEl, 'tr') as HTMLTableRowElement,\n        isStable,\n      )\n    }\n  }\n}\n\nfunction refineHookProps(raw: ResourceLaneHookPropsInput): ResourceLaneContentArg {\n  return {\n    resource: new ResourceApi(raw.context, raw.resource),\n  }\n}\n","import { createElement, Ref, BaseComponent, CssDimValue, RenderHook } from '@fullcalendar/common'\nimport { GroupLaneRenderHooks, ColCellContentArg } from '@fullcalendar/resource-common'\n\nexport interface DividerRowProps {\n  elRef?: Ref<HTMLTableRowElement>\n  innerHeight: CssDimValue\n  groupValue: any\n  renderingHooks: GroupLaneRenderHooks\n}\n\n/*\nparallels the SpreadsheetGroupRow\n*/\nexport class DividerRow extends BaseComponent<DividerRowProps> {\n  render() {\n    let { props } = this\n    let { renderingHooks } = this.props\n    let hookProps: ColCellContentArg = { groupValue: props.groupValue, view: this.context.viewApi }\n\n    return (\n      <tr ref={props.elRef}>\n        <RenderHook\n          hookProps={hookProps}\n          classNames={renderingHooks.laneClassNames}\n          content={renderingHooks.laneContent}\n          didMount={renderingHooks.laneDidMount}\n          willUnmount={renderingHooks.laneWillUnmount}\n        >\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <td\n              ref={rootElRef}\n              className={\n                [\n                  'fc-timeline-lane',\n                  'fc-resource-group',\n                  this.context.theme.getClass('tableCellShaded'),\n                ].concat(classNames).join(' ')\n              }\n            >\n              <div style={{ height: props.innerHeight }} ref={innerElRef}>\n                {innerContent}\n              </div>\n            </td>\n          )}\n        </RenderHook>\n      </tr>\n    )\n  }\n}\n","import {\n  createElement, SplittableProps, EventStore, BaseComponent, RefMap,\n  DateMarker, DateRange, DateProfile,\n} from '@fullcalendar/common'\nimport { GroupNode, ResourceNode } from '@fullcalendar/resource-common'\nimport { TimelineDateProfile, TimelineCoords } from '@fullcalendar/timeline'\nimport { ResourceTimelineLane } from './ResourceTimelineLane'\nimport { DividerRow } from './DividerRow'\n\nexport interface ResourceTimelineLanesBodyProps extends ResourceTimelineLanesContentProps {\n  rowElRefs: RefMap<HTMLElement> // indexed by NUMERICAL INDEX, not node.id\n}\n\nexport interface ResourceTimelineLanesContentProps {\n  rowNodes: (GroupNode | ResourceNode)[]\n  splitProps: { [resourceId: string]: SplittableProps }\n  dateProfile: DateProfile\n  tDateProfile: TimelineDateProfile\n  nowDate: DateMarker\n  todayRange: DateRange\n  fallbackBusinessHours: EventStore | null\n  innerHeights: number[]\n  slatCoords: TimelineCoords | null\n  onRowHeightChange?: (rowEl: HTMLTableRowElement, isStable: boolean) => void\n}\n\nexport class ResourceTimelineLanesBody extends BaseComponent<ResourceTimelineLanesBodyProps> { // TODO: this technique more\n  render() {\n    let { props, context } = this\n    let { rowElRefs, innerHeights } = props\n\n    return (\n      <tbody>\n        {props.rowNodes.map((node, index) => {\n          if ((node as GroupNode).group) {\n            return (\n              <DividerRow\n                key={node.id}\n                elRef={rowElRefs.createRef(node.id)}\n                groupValue={(node as GroupNode).group.value}\n                renderingHooks={(node as GroupNode).group.spec}\n                innerHeight={innerHeights[index] || ''}\n              />\n            )\n          }\n\n          if ((node as ResourceNode).resource) {\n            let resource = (node as ResourceNode).resource\n\n            return (\n              <ResourceTimelineLane\n                key={node.id}\n                elRef={rowElRefs.createRef(node.id)}\n                {...props.splitProps[resource.id]}\n                resource={resource}\n                dateProfile={props.dateProfile}\n                tDateProfile={props.tDateProfile}\n                nowDate={props.nowDate}\n                todayRange={props.todayRange}\n                nextDayThreshold={context.options.nextDayThreshold}\n                businessHours={resource.businessHours || props.fallbackBusinessHours}\n                innerHeight={innerHeights[index] || ''}\n                timelineCoords={props.slatCoords}\n                onHeightChange={props.onRowHeightChange}\n              />\n            )\n          }\n\n          return null\n        })}\n      </tbody>\n    )\n  }\n}\n","import { createElement, PositionCache, createRef, BaseComponent, CssDimValue, RefMap } from '@fullcalendar/common'\nimport { GroupNode, ResourceNode } from '@fullcalendar/resource-common'\nimport { ResourceTimelineLanesBody, ResourceTimelineLanesContentProps } from './ResourceTimelineLanesBody'\n\nexport interface ResourceTimelineLanesProps extends ResourceTimelineLanesContentProps {\n  minHeight: CssDimValue\n  clientWidth: number | null\n  tableMinWidth: CssDimValue\n  onRowCoords?: (rowCoords: PositionCache) => void\n}\n\nexport class ResourceTimelineLanes extends BaseComponent<ResourceTimelineLanesProps> {\n  private rootElRef = createRef<HTMLTableElement>()\n  private rowElRefs = new RefMap<HTMLElement>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <table\n        ref={this.rootElRef}\n        aria-hidden\n        className={'fc-scrollgrid-sync-table ' + context.theme.getClass('table')}\n        style={{\n          minWidth: props.tableMinWidth,\n          width: props.clientWidth,\n          height: props.minHeight,\n        }}\n      >\n        <ResourceTimelineLanesBody\n          rowElRefs={this.rowElRefs}\n          rowNodes={props.rowNodes}\n          dateProfile={props.dateProfile}\n          tDateProfile={props.tDateProfile}\n          nowDate={props.nowDate}\n          todayRange={props.todayRange}\n          splitProps={props.splitProps}\n          fallbackBusinessHours={props.fallbackBusinessHours}\n          slatCoords={props.slatCoords}\n          innerHeights={props.innerHeights}\n          onRowHeightChange={props.onRowHeightChange}\n        />\n      </table>\n    )\n  }\n\n  componentDidMount() {\n    this.updateCoords()\n  }\n\n  componentDidUpdate() {\n    this.updateCoords()\n  }\n\n  componentWillUnmount() {\n    if (this.props.onRowCoords) {\n      this.props.onRowCoords(null)\n    }\n  }\n\n  updateCoords() {\n    let { props } = this\n\n    if (props.onRowCoords && props.clientWidth !== null) { // a populated clientWidth means sizing has stabilized\n      this.props.onRowCoords(\n        new PositionCache(\n          this.rootElRef.current,\n          collectRowEls(this.rowElRefs.currentMap, props.rowNodes),\n          false,\n          true, // isVertical\n        ),\n      )\n    }\n  }\n}\n\nfunction collectRowEls(elMap: { [key: string]: HTMLElement }, rowNodes: (GroupNode | ResourceNode)[]) {\n  return rowNodes.map((rowNode) => elMap[rowNode.id])\n}\n","import {\n  createElement, PositionCache, Duration, EventStore, DateSpan, EventUiHash, EventInteractionState,\n  DateComponent, Hit, createRef, CssDimValue, VNode, memoize, NowTimer, greatestDurationDenominator,\n  DateMarker, DateRange, NowIndicatorRoot, DateProfile, Fragment,\n} from '@fullcalendar/common'\nimport { ResourceHash, GroupNode, ResourceNode, ResourceSplitter } from '@fullcalendar/resource-common'\nimport {\n  TimelineDateProfile, TimelineCoords, TimelineSlats,\n  TimelineLaneSlicer, TimelineLaneBg, TimelineLaneSeg,\n  coordToCss,\n} from '@fullcalendar/timeline'\nimport { ResourceTimelineLanes } from './ResourceTimelineLanes'\n\nexport interface ResourceTimelineGridProps {\n  dateProfile: DateProfile\n  tDateProfile: TimelineDateProfile\n  rowNodes: (GroupNode | ResourceNode)[]\n  businessHours: EventStore | null\n  dateSelection: DateSpan | null\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  resourceStore: ResourceHash\n  nextDayThreshold: Duration\n  clientWidth: number | null\n  clientHeight: number | null\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  expandRows: boolean\n  rowInnerHeights: number[]\n  onSlatCoords?: (slatCoords: TimelineCoords) => void\n  onRowCoords?: (rowCoords: PositionCache) => void\n  onScrollLeftRequest?: (scrollLeft: number) => void\n  onRowHeightChange?: (rowEl: HTMLTableRowElement, isStable: boolean) => void\n}\n\ninterface ResourceTimelineGridState {\n  slatCoords: TimelineCoords | null\n}\n\nexport class ResourceTimelineGrid extends DateComponent<ResourceTimelineGridProps, ResourceTimelineGridState> {\n  private computeHasResourceBusinessHours = memoize(computeHasResourceBusinessHours)\n  private resourceSplitter = new ResourceSplitter() // doesn't let it do businessHours tho\n  private bgSlicer = new TimelineLaneSlicer()\n  private slatsRef = createRef<TimelineSlats>() // needed for Hit creation :(\n  private rowCoords: PositionCache // for queryHit\n\n  state: ResourceTimelineGridState = {\n    slatCoords: null,\n  }\n\n  render() {\n    let { props, state, context } = this\n    let { dateProfile, tDateProfile } = props\n    let timerUnit = greatestDurationDenominator(tDateProfile.slotDuration).unit\n    let hasResourceBusinessHours = this.computeHasResourceBusinessHours(props.rowNodes)\n\n    let splitProps = this.resourceSplitter.splitProps(props)\n    let bgLaneProps = splitProps['']\n    let bgSlicedProps = this.bgSlicer.sliceProps(\n      bgLaneProps,\n      dateProfile,\n      tDateProfile.isTimeScale ? null : props.nextDayThreshold,\n      context, // wish we didn't need to pass in the rest of these args...\n      dateProfile,\n      context.dateProfileGenerator,\n      tDateProfile,\n      context.dateEnv,\n    )\n\n    // WORKAROUND: make ignore slatCoords when out of sync with dateProfile\n    let slatCoords = state.slatCoords && state.slatCoords.dateProfile === props.dateProfile ? state.slatCoords : null\n\n    return (\n      <div\n        ref={this.handleEl}\n        className={[\n          'fc-timeline-body',\n          props.expandRows ? 'fc-timeline-body-expandrows' : '',\n        ].join(' ')}\n        style={{ minWidth: props.tableMinWidth }}\n      >\n        <NowTimer unit={timerUnit}>\n          {(nowDate: DateMarker, todayRange: DateRange) => (\n            <Fragment>\n              <TimelineSlats\n                ref={this.slatsRef}\n                dateProfile={dateProfile}\n                tDateProfile={tDateProfile}\n                nowDate={nowDate}\n                todayRange={todayRange}\n                clientWidth={props.clientWidth}\n                tableColGroupNode={props.tableColGroupNode}\n                tableMinWidth={props.tableMinWidth}\n                onCoords={this.handleSlatCoords}\n                onScrollLeftRequest={props.onScrollLeftRequest}\n              />\n              <TimelineLaneBg\n                businessHourSegs={hasResourceBusinessHours ? null : bgSlicedProps.businessHourSegs}\n                bgEventSegs={bgSlicedProps.bgEventSegs}\n                timelineCoords={slatCoords}\n                // empty array will result in unnecessary rerenders?\n                eventResizeSegs={(bgSlicedProps.eventResize ? bgSlicedProps.eventResize.segs as TimelineLaneSeg[] : [])}\n                dateSelectionSegs={bgSlicedProps.dateSelectionSegs}\n                nowDate={nowDate}\n                todayRange={todayRange}\n              />\n              <ResourceTimelineLanes\n                rowNodes={props.rowNodes}\n                dateProfile={dateProfile}\n                tDateProfile={props.tDateProfile}\n                nowDate={nowDate}\n                todayRange={todayRange}\n                splitProps={splitProps}\n                fallbackBusinessHours={hasResourceBusinessHours ? props.businessHours : null}\n                clientWidth={props.clientWidth}\n                minHeight={props.expandRows ? props.clientHeight : ''}\n                tableMinWidth={props.tableMinWidth}\n                innerHeights={props.rowInnerHeights}\n                slatCoords={slatCoords}\n                onRowCoords={this.handleRowCoords}\n                onRowHeightChange={props.onRowHeightChange}\n              />\n              {(context.options.nowIndicator && slatCoords && slatCoords.isDateInRange(nowDate)) && (\n                <div className=\"fc-timeline-now-indicator-container\">\n                  <NowIndicatorRoot isAxis={false} date={nowDate}>\n                    {(rootElRef, classNames, innerElRef, innerContent) => (\n                      <div\n                        ref={rootElRef}\n                        className={['fc-timeline-now-indicator-line'].concat(classNames).join(' ')}\n                        style={coordToCss(slatCoords.dateToCoord(nowDate), context.isRtl)}\n                      >\n                        {innerContent}\n                      </div>\n                    )}\n                  </NowIndicatorRoot>\n                </div>\n              )}\n            </Fragment>\n          )}\n        </NowTimer>\n      </div>\n    )\n  }\n\n  handleEl = (el: HTMLElement | null) => {\n    if (el) {\n      this.context.registerInteractiveComponent(this, { el })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  handleSlatCoords = (slatCoords: TimelineCoords | null) => {\n    this.setState({ slatCoords })\n\n    if (this.props.onSlatCoords) {\n      this.props.onSlatCoords(slatCoords)\n    }\n  }\n\n  handleRowCoords = (rowCoords: PositionCache | null) => {\n    this.rowCoords = rowCoords\n\n    if (this.props.onRowCoords) {\n      this.props.onRowCoords(rowCoords)\n    }\n  }\n\n  // Hit System\n  // ------------------------------------------------------------------------------------------\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let rowCoords = this.rowCoords\n    let rowIndex = rowCoords.topToIndex(positionTop)\n\n    if (rowIndex != null) {\n      let resource = (this.props.rowNodes[rowIndex] as ResourceNode).resource\n\n      if (resource) { // not a group\n        let slatHit = this.slatsRef.current.positionToHit(positionLeft)\n\n        if (slatHit) {\n          return {\n            dateProfile: this.props.dateProfile,\n            dateSpan: {\n              range: slatHit.dateSpan.range,\n              allDay: slatHit.dateSpan.allDay,\n              resourceId: resource.id,\n            },\n            rect: {\n              left: slatHit.left,\n              right: slatHit.right,\n              top: rowCoords.tops[rowIndex],\n              bottom: rowCoords.bottoms[rowIndex],\n            },\n            dayEl: slatHit.dayEl,\n            layer: 0,\n          }\n        }\n      }\n    }\n\n    return null\n  }\n}\n\nfunction computeHasResourceBusinessHours(rowNodes: (GroupNode | ResourceNode)[]) {\n  for (let node of rowNodes) {\n    let resource = (node as ResourceNode).resource\n\n    if (resource && resource.businessHours) {\n      return true\n    }\n  }\n\n  return false\n}\n","import {\n  createElement, createRef, ElementDragging, PointerDragEvent, BaseComponent, ColProps,\n  ChunkConfigRowContent, ChunkConfigContent, ScrollGridSectionConfig,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  config,\n} from '@fullcalendar/common'\nimport { ScrollGrid } from '@fullcalendar/scrollgrid'\n\nconst MIN_RESOURCE_AREA_WIDTH = 30 // definitely bigger than scrollbars\n\nexport interface ResourceTimelineViewLayoutProps {\n  spreadsheetCols: ColProps[]\n  spreadsheetHeaderRows: ChunkConfigRowContent\n  spreadsheetBodyRows: ChunkConfigRowContent\n  timeCols: ColProps[]\n  timeHeaderContent: ChunkConfigContent\n  timeBodyContent: ChunkConfigContent\n  forPrint: boolean\n  isHeightAuto: boolean\n}\n\ninterface ResourceTimelineViewLayoutState {\n  resourceAreaWidthOverride: number | null\n}\n\n// RENAME?\nexport class ResourceTimelineViewLayout extends BaseComponent<ResourceTimelineViewLayoutProps, ResourceTimelineViewLayoutState> {\n  private scrollGridRef = createRef<ScrollGrid>()\n  private timeBodyScrollerElRef = createRef<HTMLDivElement>()\n  private spreadsheetHeaderChunkElRef = createRef<HTMLTableCellElement>()\n  private spreadsheetResizerDragging: ElementDragging\n  private rootElRef = createRef<HTMLElement>()\n  private ensureScrollGridResizeId: number = 0\n\n  state = {\n    resourceAreaWidthOverride: null,\n  }\n\n  render() {\n    let { props, state, context } = this\n    let { options } = context\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(options)\n\n    let sections: ScrollGridSectionConfig[] = [\n      {\n        type: 'header',\n        key: 'header',\n        syncRowHeights: true,\n        isSticky: stickyHeaderDates,\n        chunks: [\n          {\n            key: 'datagrid',\n            elRef: this.spreadsheetHeaderChunkElRef,\n            // TODO: allow the content to specify this. have general-purpose 'content' with obj with keys\n            tableClassName: 'fc-datagrid-header',\n            rowContent: props.spreadsheetHeaderRows,\n          },\n          {\n            key: 'divider',\n            outerContent: (\n              <td role=\"presentation\" className={'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')} />\n            ),\n          },\n          {\n            key: 'timeline',\n            content: props.timeHeaderContent,\n          },\n        ],\n      },\n      {\n        type: 'body',\n        key: 'body',\n        syncRowHeights: true,\n        liquid: true,\n        expandRows: Boolean(options.expandRows),\n        chunks: [\n          {\n            key: 'datagrid',\n            tableClassName: 'fc-datagrid-body',\n            rowContent: props.spreadsheetBodyRows,\n          },\n          {\n            key: 'divider',\n            outerContent: (\n              <td role=\"presentation\" className={'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')} />\n            ),\n          },\n          {\n            key: 'timeline',\n            scrollerElRef: this.timeBodyScrollerElRef,\n            content: props.timeBodyContent,\n          },\n        ],\n      },\n    ]\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [\n          {\n            key: 'datagrid',\n            content: renderScrollShim,\n          },\n          {\n            key: 'divider',\n            outerContent: (\n              <td role=\"presentation\" className={'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded')} />\n            ),\n          },\n          {\n            key: 'timeline',\n            content: renderScrollShim,\n          },\n        ],\n      })\n    }\n\n    let resourceAreaWidth = state.resourceAreaWidthOverride != null\n      ? state.resourceAreaWidthOverride\n      : options.resourceAreaWidth\n\n    return (\n      <ScrollGrid\n        ref={this.scrollGridRef}\n        elRef={this.rootElRef}\n        liquid={!props.isHeightAuto && !props.forPrint}\n        collapsibleWidth={false}\n        colGroups={[\n          { cols: props.spreadsheetCols, width: resourceAreaWidth },\n          { cols: [] }, // for the divider\n          { cols: props.timeCols },\n        ]}\n        sections={sections}\n      />\n    )\n  }\n\n  forceTimeScroll(left: number) {\n    let scrollGrid = this.scrollGridRef.current\n    scrollGrid.forceScrollLeft(2, left) // 2 = the time area\n  }\n\n  forceResourceScroll(top: number) {\n    let scrollGrid = this.scrollGridRef.current\n    scrollGrid.forceScrollTop(1, top) // 1 = the body\n  }\n\n  getResourceScroll(): number {\n    let timeBodyScrollerEl = this.timeBodyScrollerElRef.current\n    return timeBodyScrollerEl.scrollTop\n  }\n\n  // Resource Area Resizing\n  // ------------------------------------------------------------------------------------------\n  // NOTE: a callback Ref for the resizer was firing multiple times with same elements (Preact)\n  // that's why we use spreadsheetResizerElRef instead\n\n  componentDidMount() {\n    this.initSpreadsheetResizing()\n  }\n\n  componentWillUnmount() {\n    this.destroySpreadsheetResizing()\n  }\n\n  initSpreadsheetResizing() {\n    let { isRtl, pluginHooks } = this.context\n    let ElementDraggingImpl = pluginHooks.elementDraggingImpl\n    let spreadsheetHeadEl = this.spreadsheetHeaderChunkElRef.current\n\n    if (ElementDraggingImpl) {\n      let rootEl = this.rootElRef.current\n      let dragging = this.spreadsheetResizerDragging = new ElementDraggingImpl(rootEl, '.fc-resource-timeline-divider')\n      let dragStartWidth\n      let viewWidth\n\n      dragging.emitter.on('dragstart', () => {\n        dragStartWidth = spreadsheetHeadEl.getBoundingClientRect().width\n        viewWidth = rootEl.getBoundingClientRect().width\n      })\n\n      dragging.emitter.on('dragmove', (pev: PointerDragEvent) => {\n        let newWidth = dragStartWidth + pev.deltaX * (isRtl ? -1 : 1)\n        newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH)\n        newWidth = Math.min(newWidth, viewWidth - MIN_RESOURCE_AREA_WIDTH)\n\n        // scrollgrid will ignore resize requests if there are too many :|\n        this.setState({\n          resourceAreaWidthOverride: newWidth,\n        }, this.ensureScrollGridResize)\n      })\n\n      dragging.setAutoScrollEnabled(false) // because gets weird with auto-scrolling time area\n    }\n  }\n\n  destroySpreadsheetResizing() {\n    if (this.spreadsheetResizerDragging) {\n      this.spreadsheetResizerDragging.destroy()\n    }\n  }\n\n  /*\n  ghetto debounce. don't race with ScrollGrid's resizing delay. solves #6140\n  */\n  ensureScrollGridResize = () => {\n    if (this.ensureScrollGridResizeId) {\n      clearTimeout(this.ensureScrollGridResizeId)\n    }\n    this.ensureScrollGridResizeId = setTimeout(() => {\n      this.scrollGridRef.current.handleSizing(false)\n    }, config.SCROLLGRID_RESIZE_INTERVAL + 1)\n  }\n}\n","import {\n  createElement, createRef, ViewContext, memoize,\n  Fragment, CssDimValue, ChunkContentCallbackArgs, isArraysEqual, PositionCache,\n  ScrollRequest, ScrollResponder, ViewRoot, BaseComponent, ViewOptionsRefined,\n} from '@fullcalendar/common'\nimport {\n  buildTimelineDateProfile, TimelineHeader,\n  buildSlatCols,\n  TimelineCoords,\n  TimelineDateProfile,\n} from '@fullcalendar/timeline'\nimport {\n  GroupNode, ResourceNode, ResourceViewProps, buildRowNodes,\n  ColSpec, GroupSpec, DEFAULT_RESOURCE_ORDER,\n} from '@fullcalendar/resource-common'\nimport { __assign } from 'tslib'\nimport { SpreadsheetRow } from './SpreadsheetRow'\nimport { SpreadsheetGroupRow } from './SpreadsheetGroupRow'\nimport { SpreadsheetHeader } from './SpreadsheetHeader'\nimport { ResourceTimelineGrid } from './ResourceTimelineGrid'\nimport { ResourceTimelineViewLayout } from './ResourceTimelineViewLayout'\n\ninterface ResourceTimelineViewState {\n  resourceAreaWidth: CssDimValue\n  spreadsheetColWidths: number[]\n  slatCoords?: TimelineCoords\n  slotCushionMaxWidth?: number\n}\n\ninterface ResourceTimelineViewSnapshot {\n  resourceScroll?: ResourceScrollState\n}\n\ninterface ResourceScrollState {\n  rowId: string\n  fromBottom: number\n}\n\nexport class ResourceTimelineView extends BaseComponent<ResourceViewProps, ResourceTimelineViewState> {\n  private processColOptions = memoize(processColOptions)\n  private buildTimelineDateProfile = memoize(buildTimelineDateProfile)\n  private hasNesting = memoize(hasNesting)\n  private buildRowNodes = memoize(buildRowNodes)\n  private layoutRef = createRef<ResourceTimelineViewLayout>()\n  private rowNodes: (GroupNode | ResourceNode)[] = []\n  private renderedRowNodes: (GroupNode | ResourceNode)[] = []\n  private buildRowIndex = memoize(buildRowIndex)\n  private rowCoords: PositionCache\n  private scrollResponder: ScrollResponder\n\n  constructor(props: ResourceViewProps, context: ViewContext) {\n    super(props, context)\n\n    this.state = {\n      resourceAreaWidth: context.options.resourceAreaWidth,\n      spreadsheetColWidths: [],\n    }\n  }\n\n  render() {\n    let { props, state, context } = this\n    let { options, viewSpec } = context\n    let { superHeaderRendering, groupSpecs, orderSpecs, isVGrouping, colSpecs } = this.processColOptions(context.options)\n\n    let tDateProfile = this.buildTimelineDateProfile(\n      props.dateProfile,\n      context.dateEnv,\n      options,\n      context.dateProfileGenerator,\n    )\n\n    let rowNodes = this.rowNodes = this.buildRowNodes(\n      props.resourceStore,\n      groupSpecs,\n      orderSpecs,\n      isVGrouping,\n      props.resourceEntityExpansions,\n      options.resourcesInitiallyExpanded,\n    )\n\n    let extraClassNames = [\n      'fc-resource-timeline',\n      this.hasNesting(rowNodes) ? '' : 'fc-resource-timeline-flat', // flat means there's no nesting\n      'fc-timeline',\n      options.eventOverlap === false ? 'fc-timeline-overlap-disabled' : 'fc-timeline-overlap-enabled',\n    ]\n\n    let { slotMinWidth } = options\n    let slatCols = buildSlatCols(tDateProfile, slotMinWidth || this.computeFallbackSlotMinWidth(tDateProfile))\n\n    return (\n      <ViewRoot viewSpec={viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={extraClassNames.concat(classNames).join(' ')}>\n            <ResourceTimelineViewLayout\n              ref={this.layoutRef}\n              forPrint={props.forPrint}\n              isHeightAuto={props.isHeightAuto}\n              spreadsheetCols={\n                buildSpreadsheetCols(colSpecs, state.spreadsheetColWidths, '')\n              }\n              spreadsheetHeaderRows={(contentArg: ChunkContentCallbackArgs) => (\n                <SpreadsheetHeader // TODO: rename to SpreadsheetHeaderRows\n                  superHeaderRendering={superHeaderRendering}\n                  colSpecs={colSpecs}\n                  onColWidthChange={this.handleColWidthChange}\n                  rowInnerHeights={contentArg.rowSyncHeights}\n                />\n              )}\n              spreadsheetBodyRows={(contentArg: ChunkContentCallbackArgs) => (\n                <Fragment>\n                  {this.renderSpreadsheetRows(rowNodes, colSpecs, contentArg.rowSyncHeights)}\n                </Fragment>\n              )}\n              timeCols={slatCols}\n              timeHeaderContent={(contentArg: ChunkContentCallbackArgs) => (\n                <TimelineHeader\n                  clientWidth={contentArg.clientWidth}\n                  clientHeight={contentArg.clientHeight}\n                  tableMinWidth={contentArg.tableMinWidth}\n                  tableColGroupNode={contentArg.tableColGroupNode}\n                  dateProfile={props.dateProfile}\n                  tDateProfile={tDateProfile}\n                  slatCoords={state.slatCoords}\n                  rowInnerHeights={contentArg.rowSyncHeights}\n                  onMaxCushionWidth={slotMinWidth ? null : this.handleMaxCushionWidth}\n                />\n              )}\n              timeBodyContent={(contentArg: ChunkContentCallbackArgs) => (\n                <ResourceTimelineGrid\n                  dateProfile={props.dateProfile}\n                  clientWidth={contentArg.clientWidth}\n                  clientHeight={contentArg.clientHeight}\n                  tableMinWidth={contentArg.tableMinWidth}\n                  tableColGroupNode={contentArg.tableColGroupNode}\n                  expandRows={contentArg.expandRows}\n                  tDateProfile={tDateProfile}\n                  rowNodes={rowNodes}\n                  businessHours={props.businessHours}\n                  dateSelection={props.dateSelection}\n                  eventStore={props.eventStore}\n                  eventUiBases={props.eventUiBases}\n                  eventSelection={props.eventSelection}\n                  eventDrag={props.eventDrag}\n                  eventResize={props.eventResize}\n                  resourceStore={props.resourceStore}\n                  nextDayThreshold={context.options.nextDayThreshold}\n                  rowInnerHeights={contentArg.rowSyncHeights}\n                  onSlatCoords={this.handleSlatCoords}\n                  onRowCoords={this.handleRowCoords}\n                  onScrollLeftRequest={this.handleScrollLeftRequest}\n                  onRowHeightChange={contentArg.reportRowHeightChange}\n                />\n              )}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderSpreadsheetRows(nodes: (ResourceNode | GroupNode)[], colSpecs: ColSpec[], rowSyncHeights: number[]) {\n    return nodes.map((node, index) => {\n      if ((node as GroupNode).group) {\n        return (\n          <SpreadsheetGroupRow\n            key={node.id}\n            id={node.id}\n            spreadsheetColCnt={colSpecs.length}\n            isExpanded={node.isExpanded}\n            group={(node as GroupNode).group}\n            innerHeight={rowSyncHeights[index] || ''}\n          />\n        )\n      }\n\n      if ((node as ResourceNode).resource) {\n        return (\n          <SpreadsheetRow\n            key={node.id}\n            colSpecs={colSpecs}\n            rowSpans={(node as ResourceNode).rowSpans}\n            depth={(node as ResourceNode).depth}\n            isExpanded={node.isExpanded}\n            hasChildren={(node as ResourceNode).hasChildren}\n            resource={(node as ResourceNode).resource}\n            innerHeight={rowSyncHeights[index] || ''}\n          />\n        )\n      }\n\n      return null\n    })\n  }\n\n  componentDidMount() {\n    this.renderedRowNodes = this.rowNodes\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest)\n  }\n\n  getSnapshotBeforeUpdate(): ResourceTimelineViewSnapshot {\n    if (!this.props.forPrint) { // because print-view is always zero?\n      return { resourceScroll: this.queryResourceScroll() }\n    }\n    return {}\n  }\n\n  componentDidUpdate(prevProps: ResourceViewProps, prevState: ResourceTimelineViewState, snapshot: ResourceTimelineViewSnapshot) {\n    this.renderedRowNodes = this.rowNodes\n\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile)\n\n    if (snapshot.resourceScroll) {\n      this.handleScrollRequest(snapshot.resourceScroll) // TODO: this gets triggered too often\n    }\n  }\n\n  componentWillUnmount() {\n    this.scrollResponder.detach()\n  }\n\n  handleSlatCoords = (slatCoords: TimelineCoords) => {\n    this.setState({ slatCoords })\n  }\n\n  handleRowCoords = (rowCoords: PositionCache) => {\n    this.rowCoords = rowCoords\n    this.scrollResponder.update(false) // TODO: could eliminate this if rowCoords lived in state\n  }\n\n  handleMaxCushionWidth = (slotCushionMaxWidth) => {\n    this.setState({\n      slotCushionMaxWidth: Math.ceil(slotCushionMaxWidth), // for less rerendering TODO: DRY\n    })\n  }\n\n  computeFallbackSlotMinWidth(tDateProfile: TimelineDateProfile) { // TODO: duplicate definition\n    return Math.max(30, ((this.state.slotCushionMaxWidth || 0) / tDateProfile.slotsPerLabel))\n  }\n\n  // Scrolling\n  // ------------------------------------------------------------------------------------------------------------------\n  // this is useful for scrolling prev/next dates while resource is scrolled down\n\n  handleScrollLeftRequest = (scrollLeft: number) => { // for ResourceTimelineGrid\n    let layout = this.layoutRef.current\n    layout.forceTimeScroll(scrollLeft)\n  }\n\n  handleScrollRequest = (request: ScrollRequest & ResourceScrollState) => { // only handles resource scroll\n    let { rowCoords } = this\n    let layout = this.layoutRef.current\n    let rowId = request.rowId || request.resourceId\n\n    if (rowCoords) {\n      if (rowId) {\n        let rowIdToIndex = this.buildRowIndex(this.renderedRowNodes)\n        let index = rowIdToIndex[rowId]\n\n        if (index != null) {\n          let scrollTop =\n            (request.fromBottom != null ?\n              rowCoords.bottoms[index] - request.fromBottom : // pixels from bottom edge\n              rowCoords.tops[index] // just use top edge\n            )\n          layout.forceResourceScroll(scrollTop)\n        }\n      }\n\n      return true\n    }\n    return null\n  }\n\n  queryResourceScroll(): ResourceScrollState {\n    let { rowCoords, renderedRowNodes } = this\n\n    if (rowCoords) {\n      let layout = this.layoutRef.current\n      let trBottoms = rowCoords.bottoms\n      let scrollTop = layout.getResourceScroll()\n      let scroll = {} as any\n\n      for (let i = 0; i < trBottoms.length; i += 1) {\n        let rowNode = renderedRowNodes[i]\n        let elBottom = trBottoms[i] - scrollTop // from the top of the scroller\n\n        if (elBottom > 0) {\n          scroll.rowId = rowNode.id\n          scroll.fromBottom = elBottom\n          break\n        }\n      }\n\n      return scroll\n    }\n    return null\n  }\n\n  // Resource INDIVIDUAL-Column Area Resizing\n  // ------------------------------------------------------------------------------------------\n\n  handleColWidthChange = (colWidths: number[]) => {\n    this.setState({\n      spreadsheetColWidths: colWidths,\n    })\n  }\n}\n\nResourceTimelineView.addStateEquality({\n  spreadsheetColWidths: isArraysEqual,\n})\n\nfunction buildRowIndex(rowNodes: (GroupNode | ResourceNode)[]) {\n  let rowIdToIndex: { [id: string]: number } = {}\n\n  for (let i = 0; i < rowNodes.length; i += 1) {\n    rowIdToIndex[rowNodes[i].id] = i\n  }\n\n  return rowIdToIndex\n}\n\nfunction buildSpreadsheetCols(colSpecs: ColSpec[], forcedWidths: number[], fallbackWidth: CssDimValue = '') {\n  return colSpecs.map((colSpec, i) => ({\n    className: colSpec.isMain ? 'fc-main-col' : '',\n    width: forcedWidths[i] || colSpec.width || fallbackWidth,\n  }))\n}\n\nfunction hasNesting(nodes: (GroupNode | ResourceNode)[]) {\n  for (let node of nodes) {\n    if ((node as GroupNode).group) {\n      return true\n    }\n\n    if ((node as ResourceNode).resource) {\n      if ((node as ResourceNode).hasChildren) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\nfunction processColOptions(options: ViewOptionsRefined) {\n  let allColSpecs: ColSpec[] = options.resourceAreaColumns || []\n  let superHeaderRendering = null\n\n  if (!allColSpecs.length) {\n    allColSpecs.push({\n      headerClassNames: options.resourceAreaHeaderClassNames,\n      headerContent: options.resourceAreaHeaderContent || 'Resources', // TODO: view.defaults\n      headerDidMount: options.resourceAreaHeaderDidMount,\n      headerWillUnmount: options.resourceAreaHeaderWillUnmount,\n    })\n  } else if (options.resourceAreaHeaderContent) { // weird way to determine if content\n    superHeaderRendering = {\n      headerClassNames: options.resourceAreaHeaderClassNames,\n      headerContent: options.resourceAreaHeaderContent,\n      headerDidMount: options.resourceAreaHeaderDidMount,\n      headerWillUnmount: options.resourceAreaHeaderWillUnmount,\n    }\n  }\n\n  let plainColSpecs: ColSpec[] = []\n  let groupColSpecs: ColSpec[] = [] // part of the colSpecs, but filtered out in order to put first\n  let groupSpecs: GroupSpec[] = []\n  let isVGrouping = false\n\n  for (let colSpec of allColSpecs) {\n    if (colSpec.group) {\n      groupColSpecs.push({\n        ...colSpec,\n        cellClassNames: colSpec.cellClassNames || options.resourceGroupLabelClassNames,\n        cellContent: colSpec.cellContent || options.resourceGroupLabelContent,\n        cellDidMount: colSpec.cellDidMount || options.resourceGroupLabelDidMount,\n        cellWillUnmount: colSpec.cellWillUnmount || options.resourceGroupLaneWillUnmount,\n      })\n    } else {\n      plainColSpecs.push(colSpec)\n    }\n  }\n\n  // BAD: mutates a user-supplied option\n  let mainColSpec = plainColSpecs[0]\n  mainColSpec.isMain = true\n  mainColSpec.cellClassNames = mainColSpec.cellClassNames || options.resourceLabelClassNames\n  mainColSpec.cellContent = mainColSpec.cellContent || options.resourceLabelContent\n  mainColSpec.cellDidMount = mainColSpec.cellDidMount || options.resourceLabelDidMount\n  mainColSpec.cellWillUnmount = mainColSpec.cellWillUnmount || options.resourceLabelWillUnmount\n\n  if (groupColSpecs.length) {\n    groupSpecs = groupColSpecs\n    isVGrouping = true\n  } else {\n    let hGroupField = options.resourceGroupField\n    if (hGroupField) {\n      groupSpecs.push({\n        field: hGroupField,\n\n        labelClassNames: options.resourceGroupLabelClassNames,\n        labelContent: options.resourceGroupLabelContent,\n        labelDidMount: options.resourceGroupLabelDidMount,\n        labelWillUnmount: options.resourceGroupLabelWillUnmount,\n\n        laneClassNames: options.resourceGroupLaneClassNames,\n        laneContent: options.resourceGroupLaneContent,\n        laneDidMount: options.resourceGroupLaneDidMount,\n        laneWillUnmount: options.resourceGroupLaneWillUnmount,\n      })\n    }\n  }\n\n  let allOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER\n  let plainOrderSpecs = []\n\n  for (let orderSpec of allOrderSpecs) {\n    let isGroup = false\n    for (let groupSpec of groupSpecs) {\n      if (groupSpec.field === orderSpec.field) {\n        groupSpec.order = orderSpec.order // -1, 0, 1\n        isGroup = true\n        break\n      }\n    }\n    if (!isGroup) {\n      plainOrderSpecs.push(orderSpec)\n    }\n  }\n\n  return {\n    superHeaderRendering,\n    isVGrouping,\n    groupSpecs,\n    colSpecs: groupColSpecs.concat(plainColSpecs),\n    orderSpecs: plainOrderSpecs,\n  }\n}\n","import { createPlugin } from '@fullcalendar/common'\n\nimport premiumCommonPlugin from '@fullcalendar/premium-common' // eslint-disable-line import/no-duplicates\n// ensure ambient declarations\nimport '@fullcalendar/premium-common' // eslint-disable-line import/no-duplicates\n\nimport timelinePlugin from '@fullcalendar/timeline'\nimport resourceCommonPlugin from '@fullcalendar/resource-common'\nimport { ResourceTimelineView } from './ResourceTimelineView'\nimport './main.css'\n\nexport { ResourceTimelineView }\nexport { ResourceTimelineLane } from './ResourceTimelineLane'\nexport { SpreadsheetRow } from './SpreadsheetRow'\n\nexport default createPlugin({\n  deps: [\n    premiumCommonPlugin,\n    resourceCommonPlugin,\n    timelinePlugin,\n  ],\n  initialView: 'resourceTimelineDay',\n  views: {\n\n    resourceTimeline: {\n      type: 'timeline', // inherit configuration\n      component: ResourceTimelineView,\n      needsResourceData: true,\n      resourceAreaWidth: '30%',\n      resourcesInitiallyExpanded: true,\n      eventResizableFromStart: true, // TODO: not DRY with this same setting in the main timeline config\n    },\n\n    resourceTimelineDay: {\n      type: 'resourceTimeline',\n      duration: { days: 1 },\n    },\n\n    resourceTimelineWeek: {\n      type: 'resourceTimeline',\n      duration: { weeks: 1 },\n    },\n\n    resourceTimelineMonth: {\n      type: 'resourceTimeline',\n      duration: { months: 1 },\n    },\n\n    resourceTimelineYear: {\n      type: 'resourceTimeline',\n      duration: { years: 1 },\n    },\n\n  },\n})\n"]},"metadata":{},"sourceType":"module"}