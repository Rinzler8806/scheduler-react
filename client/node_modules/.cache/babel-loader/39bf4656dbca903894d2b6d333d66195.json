{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shane\\\\desktop\\\\scheduler-react\\\\client\\\\src\\\\Components\\\\Calendar.jsx\";\nimport React, { createRef, useState } from 'react';\nimport FullCalendar from '@fullcalendar/react'; // must go before plugins\n\nimport dayGridPlugin from '@fullcalendar/daygrid'; // a plugin!\n\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport resourceTimelinePlugin from '@fullcalendar/resource-timeline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function () {\n  const [modalOpen, setModalOpen] = useState(false);\n  const calendarRef = /*#__PURE__*/createRef();\n\n  const onEventAdded = event => {\n    let calendarApi = this.calendarRef.current.getApi();\n    calendarApi.addEvent(event);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Event\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      ref: calendarRef,\n      schedulerLicenseKey: \"CC-Attribution-NonCommercial-NoDerivatives\",\n      plugins: [dayGridPlugin, timeGridPlugin, resourceTimelinePlugin],\n      initialView: \"dayGridMonth\",\n      events: \"https://fullcalendar.io/demo-events.json?start=2021-03-22&end=2021-08-22\",\n      resources: \"https://fullcalendar.io/demo-resources.json?with-nesting&with-colors\",\n      customButtons: {\n        myTimeDayBtn: {\n          text: \"timeDay\",\n\n          click() {\n            const calendar = calendarRef.current;\n\n            if (calendar) {\n              const calendarApi = calendar.getApi();\n              calendarApi.changeView(\"timeGridDay\");\n            }\n          }\n\n        },\n        myTimeWeekBtn: {\n          text: \"timeWeek\",\n\n          click() {\n            const calendar = calendarRef.current;\n\n            if (calendar) {\n              const calendarApi = calendar.getApi();\n              calendarApi.changeView(\"timeGridWeek\");\n            }\n          }\n\n        },\n        myTimeLineDayBtn: {\n          text: \"timeLineDay\",\n\n          click() {\n            const calendar = calendarRef.current;\n\n            if (calendar) {\n              const calendarApi = calendar.getApi();\n              calendarApi.changeView(\"resourceTimelineDay\");\n            }\n          }\n\n        },\n        myTimeLineWeekBtn: {\n          text: \"timeLineWeek\",\n\n          click() {\n            const calendar = calendarRef.current;\n\n            if (calendar) {\n              const calendarApi = calendar.getApi();\n              calendarApi.changeView(\"resourceTimelineWeek\");\n            }\n          }\n\n        }\n      },\n      headerToolbar: {\n        left: \"prev,next\",\n        center: \"title\",\n        right: \"today,dayGridDay,dayGridWeek,dayGridMonth,myTimeDayBtn,myTimeWeekBtn,myTimeLineDayBtn,myTimeLineWeekBtn\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(AddEventModal, {\n      isOpen: modalOpen,\n      onClose: () => setModalOpen(false),\n      onEventAdded: event => onEventAdded(event)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 11\n  }, this);\n}\n;","map":{"version":3,"sources":["C:/Users/shane/desktop/scheduler-react/client/src/Components/Calendar.jsx"],"names":["React","createRef","useState","FullCalendar","dayGridPlugin","timeGridPlugin","resourceTimelinePlugin","modalOpen","setModalOpen","calendarRef","onEventAdded","event","calendarApi","current","getApi","addEvent","myTimeDayBtn","text","click","calendar","changeView","myTimeWeekBtn","myTimeLineDayBtn","myTimeLineWeekBtn","left","center","right"],"mappings":"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","sourcesContent":["import React, { createRef, useState } from 'react';\r\nimport FullCalendar from '@fullcalendar/react'; // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid'; // a plugin!\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport resourceTimelinePlugin from '@fullcalendar/resource-timeline';\r\n\r\nexport default function () {\r\n    \r\n        const [modalOpen, setModalOpen] = useState(false)\r\n        const calendarRef = createRef()\r\n        const onEventAdded = event => {\r\n          let calendarApi = this.calendarRef.current.getApi()\r\n            calendarApi.addEvent(event);\r\n        }\r\n    \r\n        return (\r\n          <section>\r\n            <button>Add Event</button>\r\n                <FullCalendar\r\n      ref={calendarRef}\r\n      schedulerLicenseKey='CC-Attribution-NonCommercial-NoDerivatives'\r\n        plugins={[ dayGridPlugin, timeGridPlugin, resourceTimelinePlugin ]}\r\n        initialView=\"dayGridMonth\"\r\n        events=\"https://fullcalendar.io/demo-events.json?start=2021-03-22&end=2021-08-22\"\r\n        resources=\"https://fullcalendar.io/demo-resources.json?with-nesting&with-colors\"\r\n        customButtons={{\r\n          myTimeDayBtn: {\r\n            text: \"timeDay\",\r\n            click() {\r\n              \r\n              const calendar = calendarRef.current;\r\n\r\n              if (calendar) {\r\n                const calendarApi = calendar.getApi();\r\n\r\n                calendarApi.changeView(\"timeGridDay\");\r\n              }\r\n            },\r\n          },\r\n          myTimeWeekBtn: {\r\n            text: \"timeWeek\",\r\n            click() {\r\n\r\n              const calendar = calendarRef.current;\r\n\r\n              if (calendar) {\r\n                const calendarApi = calendar.getApi();\r\n\r\n                calendarApi.changeView(\"timeGridWeek\");\r\n              }\r\n            }\r\n          },\r\n          myTimeLineDayBtn: {\r\n            text: \"timeLineDay\",\r\n            click() {\r\n              \r\n              const calendar = calendarRef.current;\r\n\r\n              if (calendar) {\r\n                const calendarApi = calendar.getApi();\r\n\r\n                calendarApi.changeView(\"resourceTimelineDay\");\r\n              }\r\n            },\r\n          },\r\n          myTimeLineWeekBtn: {\r\n            text: \"timeLineWeek\",\r\n            click() {\r\n\r\n              const calendar = calendarRef.current;\r\n\r\n              if (calendar) {\r\n                const calendarApi = calendar.getApi();\r\n\r\n                calendarApi.changeView(\"resourceTimelineWeek\");\r\n              }\r\n            }\r\n          },\r\n        }}\r\n        headerToolbar={{\r\n          left: \"prev,next\",\r\n          center: \"title\",\r\n          right: \"today,dayGridDay,dayGridWeek,dayGridMonth,myTimeDayBtn,myTimeWeekBtn,myTimeLineDayBtn,myTimeLineWeekBtn\",\r\n        }}\r\n      />\r\n      <AddEventModal isOpen={modalOpen} onClose={() => setModalOpen(false)} onEventAdded={event => onEventAdded(event)} />\r\n      </section>\r\n    )\r\n};"]},"metadata":{},"sourceType":"module"}